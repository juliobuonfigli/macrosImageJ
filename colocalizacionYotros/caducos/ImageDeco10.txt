

macro "Image Deconstructor [r]" 
{

requires("1.29p");                      

id1=getImageID();                        //identificación de IDs
tamano=0;
figura=newArray(nImages);
for(i=id1-10000; i<id1+10000; i++)
	{
	if(isOpen(i) && tamano<nImages)
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}


 Dialog.create("ImageDeco");    //genero ventana de inicio                                                      
  Dialog.addChoice("Red:", figura);         
  Dialog.addChoice("Green:", figura);          
  Dialog.addChoice("Mask:", figura);  
  
       Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	mascara=Dialog.getChoice();
   	

selectWindow(mascara);
run("Select None");

selectWindow(rojo);
run("8-bit");
selectWindow(verde);
run("8-bit");

w = getWidth;                                  //cargo tamaño de imagen
h = getHeight;


function contarUnos(ventana)                     //Declaro una función que cuenta unos
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		a[i] = getPixel(x,y);
		if(a[i]==255)
			sumador++;
		i++;
		}
	}
return sumador;
}

unosMascara=contarUnos(mascara);

imageCalculator("AND create", verde, mascara);     //opero imágenes con la máscara
rename("verdeAndMascara");
imageCalculator("AND create", rojo, mascara);   
rename("rojoAndMascara");


selectWindow(mascara);	           //vectorizo la máscara
 masc = newArray(w*h);
 i = 0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		masc[i] = getPixel(x,y);
		i++;
		}
	}

unosMascara=contarUnos(mascara);                        //cuento unos




selectWindow("rojoAndMascara");	                     //vectorizo cada canal
  r = newArray(unosMascara);
  i = 0;
  mas=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		if(masc[mas]==255)
			{
			r[i] = getPixel(x,y);
			i++;
			}
		mas++;
		}
	}


selectWindow("verdeAndMascara");	
  v = newArray(unosMascara);
  i = 0;
  mas=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		if(masc[mas]==255)
			{
			v[i] = getPixel(x,y);
			i++;
			}
		mas++;
		}
	}


selectWindow("verdeAndMascara");
close();
selectWindow("rojoAndMascara");
close();

m=0;
rf=newArray(unosMascara);                     // parametrizacion en 10 compartimientos

r1=newArray(unosMascara);
for(i=0; i<unosMascara; i++)
rf[i]=true;
d=0;
do 
{
m++;
for(i=0; i<unosMascara; i++)
	{
	if(r[i]==m && rf[i]==true)
		{
		r1[i]=m;
		rf[i]=false;
		d++;
		}
		else
		{
		if(rf[i]==true)
			r1[i]=0;
		}
	}

}
while(d<unosMascara/10 && m<256)

r2=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(r[i]==m && rf[i]==true) { r2[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) r2[i]=0; } } } while(d<unosMascara/10 && m<256)
r3=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(r[i]==m && rf[i]==true) { r3[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) r3[i]=0; } } } while(d<unosMascara/10 && m<256)
r4=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(r[i]==m && rf[i]==true) { r4[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) r4[i]=0; } } } while(d<unosMascara/10 && m<256)
r5=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(r[i]==m && rf[i]==true) { r5[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) r5[i]=0; } } } while(d<unosMascara/10 && m<256)
r6=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(r[i]==m && rf[i]==true) { r6[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) r6[i]=0; } } } while(d<unosMascara/10 && m<256)
r7=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(r[i]==m && rf[i]==true) { r7[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) r7[i]=0; } } } while(d<unosMascara/10 && m<256)
r8=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(r[i]==m && rf[i]==true) { r8[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) r8[i]=0; } } } while(d<unosMascara/10 && m<256)
r9=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(r[i]==m && rf[i]==true) { r9[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) r9[i]=0; } } } while(d<unosMascara/10 && m<256)
r10=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(r[i]==m && rf[i]==true) { r10[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) r10[i]=0; } } } while(d<unosMascara/10 && m<256)

m=0;
v1=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v1[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v1[i]=0; } } } while(d<unosMascara/10 && m<256)
v2=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v2[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v2[i]=0; } } } while(d<unosMascara/10 && m<256)
v3=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v3[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v3[i]=0; } } } while(d<unosMascara/10 && m<256)
v4=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v4[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v4[i]=0; } } } while(d<unosMascara/10 && m<256)
v5=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v5[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v5[i]=0; } } } while(d<unosMascara/10 && m<256)
v6=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v6[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v6[i]=0; } } } while(d<unosMascara/10 && m<256)
v7=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v7[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v7[i]=0; } } } while(d<unosMascara/10 && m<256)
v8=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v8[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v8[i]=0; } } } while(d<unosMascara/10 && m<256)
v9=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v9[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v9[i]=0; } } } while(d<unosMascara/10 && m<256)
v10=newArray(unosMascara); for(i=0; i<unosMascara; i++) rf[i]=true; d=0; 
do { m++; for(i=0; i<unosMascara; i++) { if(v[i]==m && rf[i]==true) { v10[i]=m; rf[i]=false; d++; } else { if(rf[i]==true) v10[i]=0; } } } while(d<unosMascara/10 && m<256)


sumaV=newArray(10);
sumaR=newArray(10);
for(i=0; i<10; i++){
sumaR[i]=0;
sumaV[i]=0;}

for(i=0; i<unosMascara; i++)
{
sumaR[0]=sumaR[0]+r1[i];
sumaR[1]=sumaR[1]+r2[i];	
sumaR[2]=sumaR[2]+r3[i];
sumaR[3]=sumaR[3]+r4[i];
sumaR[4]=sumaR[4]+r5[i];
sumaR[5]=sumaR[5]+r6[i];	
sumaR[6]=sumaR[6]+r7[i];
sumaR[7]=sumaR[7]+r8[i];
sumaR[8]=sumaR[8]+r9[i];
sumaR[9]=sumaR[9]+r10[i];	

sumaV[0]=sumaV[0]+v1[i];
sumaV[1]=sumaV[1]+v2[i];	
sumaV[2]=sumaV[2]+v3[i];
sumaV[3]=sumaV[3]+v4[i];
sumaV[4]=sumaV[4]+v5[i];
sumaV[5]=sumaV[5]+v6[i];	
sumaV[6]=sumaV[6]+v7[i];
sumaV[7]=sumaV[7]+v8[i];
sumaV[8]=sumaV[8]+v9[i];
sumaV[9]=sumaV[9]+v10[i];	
}

numRV=newArray(10);
denR=newArray(10);
denV=newArray(10);
promV=newArray(10);
promR=newArray(10);
denRV=newArray(10);
for(i=0; i<10; i++){
promR[i]=sumaR[i]/unosMascara;
promV[i]=sumaV[i]/unosMascara;
numRV[i]=0;
denR[i]=0;
denV[i]=0;
promV[i]=0;
promR[i]=0;
denRV[i]=0;

}


for(i=0; i<unosMascara; i++)                                     //calculo todas las series                
	{
	showStatus("Pearson: "+i);
	denR[0]=denR[0]+(r1[i]-promR[0])*(r1[i]-promR[0]);                                                                                                        
	denV[0]=denV[0]+(v1[i]-promV[0])*(v1[i]-promV[0]);
	numRV[0]=numRV[0]+(r1[i]-promR[0])*(v1[i]-promV[0]);
	denR[1]=denR[1]+(r2[i]-promR[1])*(r2[i]-promR[1]);                                                                                                        
	denV[1]=denV[1]+(v2[i]-promV[1])*(v2[i]-promV[1]);
	numRV[1]=numRV[1]+(r2[i]-promR[1])*(v2[i]-promV[1]);
	denR[2]=denR[2]+(r3[i]-promR[2])*(r3[i]-promR[2]);                                                                                                        
        denV[2]=denV[2]+(v3[i]-promV[2])*(v3[i]-promV[2]);
        numRV[2]=numRV[2]+(r3[i]-promR[2])*(v3[i]-promV[2]);
	denR[3]=denR[3]+(r4[i]-promR[3])*(r4[i]-promR[3]);                                                                                                        
        denV[3]=denV[3]+(v4[i]-promV[3])*(v4[i]-promV[3]);
        numRV[3]=numRV[3]+(r4[i]-promR[3])*(v4[i]-promV[3]);
	denR[4]=denR[4]+(r5[i]-promR[4])*(r5[i]-promR[4]);                                                                                                        
        denV[4]=denV[4]+(v5[i]-promV[4])*(v5[i]-promV[4]);
        numRV[4]=numRV[4]+(r5[i]-promR[4])*(v5[i]-promV[4]);
	denR[5]=denR[5]+(r6[i]-promR[5])*(r6[i]-promR[5]);                                                                                                        
        denV[5]=denV[5]+(v6[i]-promV[5])*(v6[i]-promV[5]);
        numRV[5]=numRV[5]+(r6[i]-promR[5])*(v6[i]-promV[5]);
	denR[6]=denR[6]+(r7[i]-promR[6])*(r7[i]-promR[6]);                                                                                                        
        denV[6]=denV[6]+(v7[i]-promV[6])*(v7[i]-promV[6]);
        numRV[6]=numRV[6]+(r7[i]-promR[6])*(v7[i]-promV[6]);
	denR[7]=denR[7]+(r8[i]-promR[7])*(r8[i]-promR[7]);                                                                                                        
        denV[7]=denV[7]+(v8[i]-promV[7])*(v8[i]-promV[7]);
        numRV[7]=numRV[7]+(r8[i]-promR[7])*(v8[i]-promV[7]);
	denR[8]=denR[8]+(r9[i]-promR[8])*(r9[i]-promR[8]);                                                                                                        
        denV[8]=denV[8]+(v9[i]-promV[8])*(v9[i]-promV[8]);
        numRV[8]=numRV[8]+(r9[i]-promR[8])*(v9[i]-promV[8]);
	denR[9]=denR[9]+(r10[i]-promR[9])*(r10[i]-promR[9]);                                                                                                        
        denV[9]=denV[9]+(v10[i]-promV[9])*(v10[i]-promV[9]);
        numRV[9]=numRV[9]+(r10[i]-promR[9])*(v10[i]-promV[9]);
	}


Pearson=newArray(10);
for(i=0; i<10; i++)
denRV[i]=sqrt(denR[i]*denV[i]);                           

for(i=0; i<10; i++){
Pearson[i]=numRV[i]/denRV[i];                                     
print(Pearson[i]);}


}






