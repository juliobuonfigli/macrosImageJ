// ESQUEMA DE COLO

macro "Esquema de colo [e]" 
{	

requires("1.29p");              

id1=getImageID();          
tamano=0;
figura=newArray(nImages);
for(i=id1-10000; i<id1+10000; i++)
	{
	if(isOpen(i) && tamano<nImages)
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}

 Dialog.create("MMSR");    //genero ventana de inicio                                                      
  Dialog.addChoice("Red:", figura);         
  Dialog.addChoice("Green:", figura);          
  Dialog.addChoice("Blue:", figura);    
  Dialog.addNumber("Iteraciones: ", 10);
  Dialog.addNumber("Semilla: ", 1);
    
	Dialog.show();
   	red=Dialog.getChoice();
   	green=Dialog.getChoice();
   	blue=Dialog.getChoice();
	iter=Dialog.getNumber();
	semilla=Dialog.getNumber();
	
setBatchMode(true);
random("seed", semilla);

selectWindow(red);
run("8-bit");
selectWindow(green);
run("8-bit");
selectWindow(blue);
run("8-bit");

w = getWidth;                                 
h = getHeight;

R=newArray(w*h);
G=newArray(w*h);
B=newArray(w*h);

function VECTORIZAR(imagenAvectorizar, w, h)                    
{
selectWindow(imagenAvectorizar);
vector=newArray(w*h);
  i = 0;
  for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		vector[i] = getPixel(x,y);
		i++;
		}
	}
return vector;
}

function RAIZCUBICA(r3)                     
{
   x = r3;    y = 1;    e = 0.00001;           
  while(x - y > e)
  {
    x = (2*x + y)/3;
    y = r3/(x*x);
  }
return x;
}

function DOBLE(c1, c2, w, h)
{
	den1=0; den2=0; num=0;
	for(i=0; i<w*h; i++)  {
		den1=den1+(c1[i])*(c1[i]);                                                                                                           
		den2=den2+(c2[i])*(c2[i]);
		num=num+(c1[i])*(c2[i]);
		}
	c=num/sqrt(den1*den2);                             
	return c;
}

function TRIPLE(c1, c2, c3, w, h)
{
	den1=0; den2=0; den3=0; num=0;
	for(i=0; i<w*h; i++)  {
		den1=den1+(c1[i])*(c1[i])*(c1[i]);                                                                                                           
		den2=den2+(c2[i])*(c2[i])*(c2[i]);
		den3=den3+(c3[i])*(c3[i])*(c3[i]);
		num=num+(c1[i])*(c2[i])*(c3[i]);
		}
	c=num/RAIZCUBICA(den1*den2*den3);                             
	return c;
}

function RANDINDICES(vec, w, h)
{
	ind=newArray(6);
	do {
		ind[0]=round(random*(w*h-1));
		ind[1]=round(random*(w*h-1));
		ind[2]=round(random*(w*h-1));
		ind[3]=round(random*(w*h-1));
		ind[4]=round(random*(w*h-1));
		ind[5]=round(random*(w*h-1));
	} while(vec[ind[0]]>=vec[ind[3]] || vec[ind[1]]>=vec[ind[4]] || vec[ind[2]]>=vec[ind[5]])
		return ind;
}

function NEWFIGURE(vector, w, h)
{
newImage("image", "8-bit black", w, h, 1);       
selectWindow("image");
i=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		setPixel(x,y, vector[i]);
		i++;
		}
	} 
return "image";
}

R=VECTORIZAR(red, w, h); 
G=VECTORIZAR(green, w, h); 
B=VECTORIZAR(blue, w, h); 

RG=DOBLE(R, G, w, h);
RB=DOBLE(R, B, w, h);
BG=DOBLE(B, G, w, h);
RGB=TRIPLE(R, G, B, w, h);

selectWindow(red);
run("Duplicate...", "title=redr");
run("Size...", "width=20 height=20 average interpolation=Bilinear");
selectWindow(green);
run("Duplicate...", "title=greenr");
run("Size...", "width=20 height=20 average interpolation=Bilinear");
selectWindow(blue);
run("Duplicate...", "title=bluer");
run("Size...", "width=20 height=20 average interpolation=Bilinear");

wr = getWidth;                                 
hr = getHeight;

Rr=VECTORIZAR("redr", wr, hr); 
Gr=VECTORIZAR("greenr", wr, hr); 
Br=VECTORIZAR("bluer", wr, hr); 

RGr=DOBLE(Rr, Gr, wr, hr);
RBr=DOBLE(Rr, Br, wr, hr);
BGr=DOBLE(Br, Gr, wr, hr);
RGBr=TRIPLE(Rr, Gr, Br, wr, hr);

RGD=abs(RGr-RG);
RBD=abs(RBr-RB);
BGD=abs(BGr-BG);
RGBD=abs(RGBr-RGB);

rgd=RGD*30/iter;
rbd=RBD*30/iter;
bgd=BGD*30/iter;
rgbd=RGBD*30/iter;

print(RGD);
print(RBD);
print(BGD);
print(RGBD);

selectWindow("redr");
close();
selectWindow("greenr");
close();
selectWindow("bluer");
close();

randR=newArray(6);
randG=newArray(6);
randB=newArray(6);

cont=1;
negCont=0;
for(i=0; i<iter; i++) {
	randR=RANDINDICES(Rr, wr, hr); //se puede acelerar creando una única función que calcule todos los coeficientes y todos los índices
	randG=RANDINDICES(Gr, wr, hr);
	randB=RANDINDICES(Br, wr, hr);
	Rr[randR[0]]=Rr[randR[0]]-1; Rr[randR[1]]=Rr[randR[1]]-1; Rr[randR[2]]=Rr[randR[2]]-1; Rr[randR[3]]=Rr[randR[3]]+1; Rr[randR[4]]=Rr[randR[4]]+1; Rr[randR[5]]=Rr[randR[5]]+1;
	Gr[randG[0]]=Gr[randG[0]]-1; Gr[randG[1]]=Gr[randG[1]]-1; Gr[randG[2]]=Gr[randG[2]]-1; Gr[randG[3]]=Gr[randG[3]]+1; Gr[randG[4]]=Gr[randG[4]]+1; Gr[randG[5]]=Gr[randG[5]]+1;
	Br[randB[0]]=Br[randB[0]]-1; Br[randB[1]]=Br[randB[1]]-1; Br[randB[2]]=Br[randB[2]]-1; Br[randB[3]]=Br[randB[3]]+1; Br[randB[4]]=Br[randB[4]]+1; Br[randB[5]]=Br[randB[5]]+1;
	/*
	RGr=DOBLE(Rr, Gr, wr, hr);
	RBr=DOBLE(Rr, Br, wr, hr);
	BGr=DOBLE(Br, Gr, wr, hr);
	RGBr=TRIPLE(Rr, Gr, Br, wr, hr);
	if(abs(RGr-RG)>RGD || abs(RBr-RB)>RBD || abs(BGr-BG)>BGD || abs(RGBr-RGB)>RGBD)
	{
	Rr[randR[0]]=Rr[randR[0]]+1; Rr[randR[1]]=Rr[randR[1]]+1; Rr[randR[2]]=Rr[randR[2]]+1; Rr[randR[3]]=Rr[randR[3]]-1; Rr[randR[4]]=Rr[randR[4]]-1; Rr[randR[5]]=Rr[randR[5]]-1;
	Gr[randG[0]]=Gr[randG[0]]+1; Gr[randG[1]]=Gr[randG[1]]+1; Gr[randG[2]]=Gr[randG[2]]+1; Gr[randG[3]]=Gr[randG[3]]-1; Gr[randG[4]]=Gr[randG[4]]-1; Gr[randG[5]]=Gr[randG[5]]-1;
	Br[randB[0]]=Br[randB[0]]+1; Br[randB[1]]=Br[randB[1]]+1; Br[randB[2]]=Br[randB[2]]+1; Br[randB[3]]=Br[randB[3]]-1; Br[randB[4]]=Br[randB[4]]-1; Br[randB[5]]=Br[randB[5]]-1;	
	negCont++;
	}
	else
	{cont++; negCont=0;}
	if(cont%30==0 && cont!=0) {
		RGD=RGD-rgd;
		RBD=RBD-rbd;
		BGD=BGD-bgd;
		RGBD=RGBD-rgbd; 
		cont++;}
	if(negCont>500) {
		RGD=RGD+rgd;
		RBD=RBD+rbd;
		BGD=BGD+bgd;
		RGBD=RGBD+rgbd; }
		
showStatus(i+"   "+cont);*/
}

print(RGD);
print(RBD);
print(BGD);
print(RGBD);

RED=NEWFIGURE(Rr, wr, hr);
rename("RED");
GREEN=NEWFIGURE(Gr, wr, hr);
rename("GREEN");
BLUE=NEWFIGURE(Br, wr, hr);
rename("BLUE");
			
run("Merge Channels...", "c1=RED c2=GREEN c3=BLUE create");

setBatchMode("exit and display");
}			
	

	