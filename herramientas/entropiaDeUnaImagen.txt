// Entropía de una imagen

w = getWidth;                                  
h = getHeight;

a = newArray(w*h);
   
i = 0;
   entropia=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}

for(i=0; i<w*h; i++)
	{
	if(i==0)
	            entropia=entropia+((a[i]-a[1])*(a[i]-a[1])+(a[i]-a[w])*(a[i]-a[w])+(a[i]-a[w+1])*(a[i]-a[w+1]))/3;
	if(i>0 && i<w-1)
            	entropia=entropia+((a[i]-a[i-1])*(a[i]-a[i-1])+(a[i]-a[i+1])*(a[i]-a[i+1])+(a[i]-a[i+w-1])*(a[i]-a[i+w-1])+(a[i]-a[i+w])*(a[i]-a[i+w])+(a[i]-a[i+w+1])*(a[i]-a[i+w+1]))/5;
            if(i==w-1)
		entropia=entropia+((a[i]-a[i-1])*(a[i]-a[i-1])+(a[i]-a[i+w-1])*(a[i]-a[i+w-1])+(a[i]-a[i+w])*(a[i]-a[i+w]))/3;
	if(i%w==0 && i!=w*h-w && i!=0)
		entropia=entropia+((a[i]-a[i+1])*(a[i]-a[i+1])+(a[i]-a[i+w])*(a[i]-a[i+w])+(a[i]-a[i+w+1])*(a[i]-a[i+w+1])+(a[i]-a[i-w+1])*(a[i]-a[i-w+1])+(a[i]-a[i-w])*(a[i]-a[i-w]))/5;
	if((i+1)%w==0 && i!=w-1 && i!=h*w-1)
		entropia=entropia+((a[i]-a[i+w])*(a[i]-a[i+w])+(a[i]-a[i-w-1])*(a[i]-a[i-w-1])+(a[i]-a[i-w])*(a[i]-a[i-w])+(a[i]-a[i+w-1])*(a[i]-a[i+w-1])+(a[i]-a[i-1])*(a[i]-a[i-1]))/5;
	if(i==h*w-w)
		entropia=entropia+((a[i]-a[i+1])*(a[i]-a[i+1])+(a[i]-a[i-w])*(a[i]-a[i-w])+(a[i]-a[i-w+1])*(a[i]-a[i-w+1]))/3;
	if(i>h*w-w && i<h*w-1)
		entropia=entropia+((a[i]-a[i-w-1])*(a[i]-a[i-w-1])+(a[i]-a[i-w])*(a[i]-a[i-w])+(a[i]-a[i-w+1])*(a[i]-a[i-w+1])+(a[i]-a[i-1])*(a[i]-a[i-1])+(a[i]-a[i+1])*(a[i]-a[i+1]))/5;
	if(i==h*w-1)
		entropia=entropia+((a[i]-a[i-1])*(a[i]-a[i-1])+(a[i]-a[i-w])*(a[i]-a[i-w])+(a[i]-a[i-w-1])*(a[i]-a[i-w-1]))/3;
	if(i>w && i<h*w-w-1 && i%w!=0 && (i+1)%w!=0)
		entropia=entropia+((a[i]-a[i-w-1])*(a[i]-a[i-w-1])+(a[i]-a[i-w])*(a[i]-a[i-w])+(a[i]-a[i-w+1])*(a[i]-a[i-w+1])+(a[i]-a[i-1])*(a[i]-a[i-1])+(a[i]-a[i+1])*(a[i]-a[i+1])+(a[i]-a[i+w-1])*(a[i]-a[i+w-1])+(a[i]-a[i+w])*(a[i]-a[i+w])+(a[i]-a[i+w+1])*(a[i]-a[i+w+1]))/8;
//print(entropia);
	}
 print(entropia);
/*
random("seed", round(random*w*h*10));
	
	u=newArray(w*h+1);                                                               
	for(i=0; i<w*h; i++)
		u[i]=true;

	ad=newArray(w*h);
	i=0;	
	while(i<w*h)
		{
		e=round(random*w*h);
		if(u[e]==true)
			{
			ad[i]=a[e];
			u[e]=false;
			i++;
			}
		}

dentropia=0;

for(i=0; i<w*h; i++)
	{
	if(i==0)
	            dentropia=dentropia+((ad[i]-ad[1])*(ad[i]-ad[1])+(ad[i]-ad[w])*(ad[i]-ad[w])+(ad[i]-ad[w+1])*(ad[i]-ad[w+1]))/3;
	if(i>0 && i<w-1)
            	dentropia=dentropia+((ad[i]-ad[i-1])*(ad[i]-ad[i-1])+(ad[i]-ad[i+1])*(ad[i]-ad[i+1])+(ad[i]-ad[i+w-1])*(ad[i]-ad[i+w-1])+(ad[i]-a[i+w])*(ad[i]-ad[i+w])+(ad[i]-ad[i+w+1])*(ad[i]-ad[i+w+1]))/5;
            if(i==w-1)
		dentropia=dentropia+((ad[i]-ad[i-1])*(ad[i]-ad[i-1])+(ad[i]-ad[i+w-1])*(ad[i]-ad[i+w-1])+(ad[i]-ad[i+w])*(ad[i]-ad[i+w]))/3;
	if(i%w==0 && i!=w*h-w && i!=0)
		dentropia=dentropia+((ad[i]-ad[i+1])*(ad[i]-ad[i+1])+(ad[i]-ad[i+w])*(ad[i]-ad[i+w])+(ad[i]-ad[i+w+1])*(ad[i]-ad[i+w+1])+(ad[i]-ad[i-w+1])*(ad[i]-ad[i-w+1])+(ad[i]-ad[i-w])*(ad[i]-ad[i-w]))/5;
	if((i+1)%w==0 && i!=w-1 && i!=h*w-1)
		dentropia=dentropia+((ad[i]-ad[i+w])*(ad[i]-ad[i+w])+(ad[i]-ad[i-w-1])*(ad[i]-ad[i-w-1])+(ad[i]-ad[i-w])*(ad[i]-ad[i-w])+(ad[i]-ad[i+w-1])*(ad[i]-ad[i+w-1])+(ad[i]-ad[i-1])*(ad[i]-ad[i-1]))/5;
	if(i==h*w-w)
		dentropia=dentropia+((ad[i]-ad[i+1])*(ad[i]-ad[i+1])+(ad[i]-ad[i-w])*(ad[i]-ad[i-w])+(ad[i]-ad[i-w+1])*(ad[i]-ad[i-w+1]))/3;
	if(i>h*w-w && i<h*w-1)
		dentropia=dentropia+((ad[i]-ad[i-w-1])*(ad[i]-ad[i-w-1])+(ad[i]-ad[i-w])*(ad[i]-ad[i-w])+(ad[i]-ad[i-w+1])*(ad[i]-ad[i-w+1])+(ad[i]-ad[i-1])*(ad[i]-ad[i-1])+(ad[i]-ad[i+1])*(ad[i]-ad[i+1]))/5;
	if(i==h*w-1)
		dentropia=dentropia+((ad[i]-ad[i-1])*(ad[i]-ad[i-1])+(ad[i]-ad[i-w])*(ad[i]-ad[i-w])+(ad[i]-ad[i-w-1])*(ad[i]-ad[i-w-1]))/3;
	if(i>w && i<h*w-w-1 && i%w!=0 && (i+1)%w!=0)
		dentropia=dentropia+((ad[i]-ad[i-w-1])*(ad[i]-ad[i-w-1])+(ad[i]-ad[i-w])*(ad[i]-ad[i-w])+(ad[i]-ad[i-w+1])*(ad[i]-ad[i-w+1])+(ad[i]-ad[i-1])*(ad[i]-ad[i-1])+(ad[i]-ad[i+1])*(ad[i]-ad[i+1])+(ad[i]-ad[i+w-1])*(ad[i]-ad[i+w-1])+(ad[i]-ad[i+w])*(ad[i]-ad[i+w])+(ad[i]-ad[i+w+1])*(ad[i]-ad[i+w+1]))/8;
//print(entropia);
	}

print(entropia/dentropia);
*/
