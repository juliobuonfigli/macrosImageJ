/*Una de las ventajas de estos métodos a diferencia del natura que leí se hace evidente en movies ya que acá se puede arrancar de una imagen (no necesito stack) por lo que puedo lograr 
mejores resoluciones temporales
Suma al pixel central y resta a otro en la vecindad de la PSF si la mayoria de los pixels en ese radio son menores que el central y si la mayoria de los
pixels entre en el central y el vecino son menores que el central. No evalua el vecino al que se le resta*/ 

iter=600000;
slices=10;
w = getWidth;              
h = getHeight;
ww=1/w;
wh=w*h;
wh2=wh-1;
size=sqrt(w*w+h*h);
GDL1=2;
GDL2=1;
intermedios=0;

function VECTORIZAR(imagenAvectorizar, w, h)                      
{
selectWindow(imagenAvectorizar);
vector=newArray(w*h);
  i = 0;
  for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		vector[i] = getPixel(x,y);
		i++;
		}
	}
return vector;
}

function RANDOMCORD()                        
{
	cords=newArray(5); 
	rand1=random;
	rand2=random;
	if(rand1<0.47)
		{cords[0]=4; cords[1]=2*PI*rand2; cords[2]=round(cords[0]*cos(cords[1])); cords[3]=round(cords[0]*sin(cords[1])); cords[4]=32;} 
	if(rand1>=0.47 && rand1<0.71)
		{cords[0]=3; cords[1]=2*PI*rand2; cords[2]=round(cords[0]*cos(cords[1])); cords[3]=round(cords[0]*sin(cords[1])); cords[4]=16;} 
	if(rand1>=0.71 && rand1<0.89)
		{cords[0]=2; cords[1]=2*PI*rand2; cords[2]=round(cords[0]*cos(cords[1])); cords[3]=round(cords[0]*sin(cords[1])); cords[4]=12;} 
	if(rand1>=0.89)
		{cords[0]=1; cords[1]=2*PI*rand2; cords[2]=round(cords[0]*cos(cords[1])); cords[3]=round(cords[0]*sin(cords[1])); cords[4]=8;} 
return cords;
}

a=newArray(w*h);

for(slice=0; slice<slices; slice++)
	{
	a=VECTORIZAR("ggg1", w, h) ;
	cid=newArray(5);
	movidas=0;
	for(i=0; i<iter; i++)
		{
		ii=round(random*wh2);  
		Xi=ii%w;
		Yi=floor(ii*ww);
		inc=1;
		cid= RANDOMCORD();
		cond1=cid[4]*0.5+GDL1;
		cond2=cid[0]-(GDL2+1);
		Xf1=Xi+cid[2];
		Yf1=Yi+cid[3];
		fi1=w*Yf1+Xf1;  	
		if(fi1>wh2)
			fi1=wh2;
		if(fi1<0)
			fi1=0;
		
		cont1=0;		
		for(k=0; k<cid[4]; k++)
			{
			xw=round(cid[0]*cos(k*2*PI/cid[4])); 
			yw=round(cid[0]*sin(k*2*PI/cid[4])); 
			Xfw=Xi+xw;
			Yfw=Yi+yw;
			fiw=w*Yfw+Xfw;  
			if(fiw>wh2)
				fiw=wh2;
			if(fiw<0)
				fiw=0;
			if(a[ii]>a[fiw])
				cont1++;
			}
		
		if(intermedios==1)
		{
		cont2=0;		
		for(k=1; k<cid[0]; k++)
			{
			xw=round(k*cos(cid[1])); 
			yw=round(k*sin(cid[1])); 
			Xfw=Xi+xw;
			Yfw=Yi+yw;
			fiw=w*Yfw+Xfw;  
			if(fiw>wh2)
				fiw=wh2;
			if(fiw<0)
				fiw=0;
			if(a[ii]>a[fiw])
				cont2++;
			}
		}
		else  
		cont2=10;
		if(Xf1>wh2 || Xf1<0)
			inc=0;
		if(cont1>cond1 && cont2>cond2)
			{	
			a[ii]=a[ii]+inc;
			a[fi1]=a[fi1]-inc;
			movidas++;
			}	
		showStatus(i+"    "+movidas+"     "+slice);
		}                       

	corte=1000+slice;
	newImage(corte, "8-bit random", w, h, 1);
	selectWindow(corte);
	i=0;
	for (y=0; y<h; y++)
		{
		for (x=0; x<w; x++)
			{
			setPixel(x,y, a[i]);
			i++;
			}
		} 
	}  

run("Images to Stack", "method=[Copy (center)] name=Stack title=10 use");
       
