/*Una de las ventajas de estos métodos a diferencia del natura que leí se hace evidente en movies ya que acá se puede arrancar de una imagen (no necesito stack) por lo que puedo lograr 
mejores resoluciones temporales
Suma al pixel central y resta a otro en la vecindad de la PSF si la mayoría de los vecinos en ese radio son menores que el central. El vecino seleccionado no necesariamente debe ser menor que 
que el central*/ 

//Probar: primero incremento y después decremento
//disminuir decremento cuando se hace en las primeras pasadas
//decrementos aleatorios en toda la corrida

//aumentar incrementos y decrementos pero aunmentar el número de slices
//decrementos aleatorios, incrementos en islas, decrementos en los mayores cuando a mayoría son menores 
//heterogeneidad (nodo) u homogeneidad (fuente) de vecinos, comparación por restas sucesivas y promedios, si fuente: suma fuente, resta toda la psf, nodo: resta nodo  
//umbral de pixel a considerar, solo resta PSFs si encuentra el central 
//sin umbral, resta a pixels individuales si estos no son centros de PSF 


iter=120000;
slices=6;
w = getWidth;              
h = getHeight;
ww=1/w;
wh=w*h;
wh2=wh-1;
size=sqrt(w*w+h*h);


function VECTORIZAR(imagenAvectorizar, w, h)                      
{
selectWindow(imagenAvectorizar);
vector=newArray(w*h);
  i = 0;
  for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		vector[i] = getPixel(x,y);
		i++;
		}
	}
return vector;
}


a=newArray(w*h);
vec=newArray(8);

for(slice=0; slice<slices; slice++)
	{
	a=VECTORIZAR("ggg1", w, h) ;
	movidas=0;
	for(i=0; i<iter; i++)
		{
		/*if(i<iter*0.005)
			{
			dec=800;
			inc=0;
			}
			else
			{
			dec=0;
			inc=1;
			}*/
//inc=1;
//dec=1;
		ii=round(random*wh2);  
		cont=0;	
		vec[0]=ii-w-1;
		vec[1]=ii-w;
		vec[2]=ii-w+1;
		vec[3]=ii-1;
		vec[4]=ii+1;
		vec[5]=ii+w-1;
		vec[6]=ii+w;
		vec[7]=ii+w+1;		
		for(k=0; k<8; k++)
			{  	
			if(vec[k]>wh2)
				vec[k]=0;
			if(vec[k]<0)
				vec[k]=0;
			}
		for(k=0; k<8; k++)
			{
			if(a[vec[k]]<a[ii])
				cont++;
			}
		if(cont>4)
			{
			if(random<0.08)
				{
				if(cont<8)
					{
					do {
				      	      ind=round(random*7);
				      	      } while(a[vec[ind]]<a[ii])
					a[vec[ind]]=a[vec[ind]]-8;
					}
				}
				else
				{a[ii]=a[ii]+1;movidas++;}
			}
/*

			a[ii]=a[ii]+1;
			randInd=round(7*random);
			a[vec[randInd]]=a[vec[randInd]]-dec;
			movidas++;
			}
		if(random<0.02)
			{
			a[ii]=a[ii]+cont;
			for(uu=0; uu<8; uu++)
				{
				//if(a[ii]>a[vec[uu]])
					a[vec[uu]]=a[vec[uu]]-dec;
				}
			movidas++;
			}	*/
				
		showStatus(i+"    "+movidas+"     "+slice);
		}                       

	corte=1000+slice;
	newImage(corte, "8-bit random", w, h, 1);
	selectWindow(corte);
	i=0;
	for (y=0; y<h; y++)
		{
		for (x=0; x<w; x++)
			{
			setPixel(x,y, a[i]);
			i++;
			}
		} 
	}  

run("Images to Stack", "method=[Copy (center)] name=Stack title=10 use");
       
