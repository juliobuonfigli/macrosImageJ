/*Una de las ventajas de estos métodos a diferencia del natura que leí se hace evidente en movies ya que acá se puede arrancar de una imagen (no necesito stack) por lo que puedo lograr 
mejores resoluciones temporales
Resta PSFs en sectores donde el grado de correlación entre la PSF y el sector supera cierto umbral. Pero en este se hace solo para 8 pixels elejidos al azar */ 

iter=5000000;
selectWindow("ggg1");
w = getWidth;              
h = getHeight;
ww=1/w;
wh=w*h;
wh2=wh-1;
size=sqrt(w*w+h*h);
w2=w-9;
umbral=0.9;

function PROMEDIO(vector, w, h)     //1: funcion para vectorizar imagenes                    
{
suma=0;  
for (i=0; i<h*w; i++)
	suma=suma+vector[i];
prom=suma/(w*h);
return prom;
}              

function VECTORIZAR(imagenAvectorizar, w, h)                      
{
selectWindow(imagenAvectorizar);
vector=newArray(w*h);
  i = 0;
  for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		vector[i] = getPixel(x,y);
		i++;
		}
	}
return vector;
}

PSF=newArray(81);
PSF=VECTORIZAR("ggg2", 9, 9);
pPSF=PROMEDIO(PSF, 9, 9); 

PSF2=newArray(81);
for(j=0; j<81; j++)                                              
	PSF2[j]=PSF[j]/256;     

a=newArray(w*h);
a=VECTORIZAR("ggg1", w, h) ;


for(j=0; j<81; j++)                                              
	denP=denP+(PSF[j]-pPSF)*(PSF[j]-pPSF);                                                                                                        
		      

movidas=0;
	
for(i=0; i<iter; i++)
	{
	do 
		{
		ii=round(random*wh2);  
		Xi=ii%w;
		Yi=floor(ii*ww);
		} 
	while(Xi>w-9 || Yi>h-9)
	
	vector=newArray(81);
  	j = 0;
	k=ii;
  	for (y=0; y<9; y++)
		{
		for (x=0; x<9; x++)
			{
			vector[j] = a[k];
			j++; k++;
			}
		k=k+w2;
		}
	
	//pvector=PROMEDIO(vector, 9, 9);
	
	b=newArray(8);
	b[0]=random*81; b[1]=random*81; b[2]=random*81; b[3]=random*81; b[4]=random*81; b[5]=random*81; b[6]=random*81; b[7]=random*81; 
	pvector=(vector[b[0]]+vector[b[1]]+vector[b[2]]+vector[b[3]]+vector[b[4]]+vector[b[5]]+vector[b[6]]+vector[b[7]])/8;
	pPSF=(PSF[b[0]]+PSF[b[0]]+PSF[b[0]]+PSF[b[0]]+PSF[b[0]]+PSF[b[0]]+PSF[b[0]]+PSF[b[0]])/8;

	numP=0;
	denV=0;
	denP=0;

	for(j=0; j<8; j++)                                              
		{
		denV=denV+(vector[b[j]]-pvector)*(vector[b[j]]-pvector);                                                                                                        
		numP=numP+(vector[b[j]]-pvector)*(PSF[b[j]]-pPSF);
		denP=denP+(PSF[b[j]]-pPSF)*(PSF[b[j]]-pPSF);      
		}      

	corr=numP/sqrt(denP*denV);    ;         
	
	if(corr>umbral)//sqrt(random))
		{
		j = 0;
		k=ii;
  		for (y=0; y<9; y++)
			{
			for (x=0; x<9; x++)
				{
				if(j==40)
					{
					a[k] = a[k]+PSF2[j];
					j++; k++;
					}
					else
					{
					a[k] = a[k]-PSF2[j];
					j++; k++;
					}
				}
			k=k+w2;
			}
		
		movidas++;
		}
		showStatus(i+"    "+movidas);
	//print(corr);
	}                       
print(movidas);
//corte=1000+slice;
newImage("Res", "8-bit random", w, h, 1);
selectWindow("Res");
i=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		setPixel(x,y, a[i]);
		i++;
		}
	} 
  

//run("Images to Stack", "method=[Copy (center)] name=Stack title=10 use");
       
