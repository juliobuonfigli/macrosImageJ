// MM

macro "MMSR [m]" 
{	

requires("1.29p");              //muestra un mensaje si la versión de imagej usada no es compatible

id1=getImageID();          //identificación de IDs
tamano=0;
figura=newArray(nImages);
for(i=id1-10000; i<id1+10000; i++)
	{
	if(isOpen(i) && tamano<nImages)
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}

 Dialog.create("MMSR");    //genero ventana de inicio                                                      
  Dialog.addChoice("Red:", figura);         
  Dialog.addChoice("Green:", figura);          
  Dialog.addChoice("Blue:", figura);    
  Dialog.addCheckbox("Random seed", true); 
  Dialog.addNumber("Seed:", 1); 
  Dialog.addNumber("Quadrant dimension (QD):", 5);
  Dialog.addNumber("Quadrant iterations (QI)=QD*QD*256*n°:", 30);
  Dialog.addNumber("Image iterations (II):", 15);
  Dialog.addNumber("Dinamic range (DR):", 10);
  Dialog.addChoice("Significance level:", newArray(0.01, 0.05)); 
  Dialog.addCheckbox("Mask threshold", false);
  
       Dialog.show();
   	red=Dialog.getChoice();
   	green=Dialog.getChoice();
   	blue=Dialog.getChoice();
   	generadasP=Dialog.getCheckbox();
	numGeneradas=Dialog.getNumber();
	nivel=Dialog.getChoice();
	intOR=Dialog.getCheckbox();
   	
setBatchMode(true);

selectWindow(red);
run("8-bit");
selectWindow(green);
run("8-bit");
selectWindow(blue);
run("8-bit");

W = getWidth;                                 
H = getHeight;
w=5;
h=5;

R=newArray(w*h);
G=newArray(w*h);
B=newArray(w*h);

RG=newArray(W*H);
GB=newArray(W*H);
BR=newArray(W*H);
RGB=newArray(W*H);

function RAIZCUBICA(r3)                     
{
   x = r3;    y = 1;    e = 0.00001;           /* e decides the accuracy level*/
  while(x - y > e)
  {
    x = (2*x + y)/3;
    y = r3/(x*x);
  }
return x;
}

function DOBLE(c1, c2, w, h)
{
	den1=0; den2=0; num=0;
	for(i=0; i<w*h; i++)  {
		den1=den1+(c1[i])*(c1[i]);                                                                                                           
		den2=den2+(c2[i])*(c2[i]);
		num=num+(c1[i])*(c2[i]);
		}
	c=num/sqrt(den1*den2);                             
	return c;
}

function TRIPLE(c1, c2, c3, w, h)
{
	den1=0; den2=0; den3=0; num=0;
	for(i=0; i<w*h; i++)  {
		den1=den1+(c1[i])*(c1[i])*(c1[i]);                                                                                                           
		den2=den2+(c2[i])*(c2[i])*(c2[i]);
		den3=den3+(c3[i])*(c3[i])*(c3[i]);
		num=num+(c1[i])*(c2[i])*(c3[i]);
		}
	c=num/RAIZCUBICA(den1*den2*den3);                             
	return c;
}

function ALEATORIZAR


j=0;
for(Y=0; Y<(H-h)+1; Y++) { 
	for(X=0; X<(W-w)+1; X++) { 
		i=0;
		selectWindow(red);
		for(y=Y; y<Y+h; y++) {
			for(x=X; x<X+w; x++) {
				R[i]=getPixel(x, y); i++; }}
		i=0;
		selectWindow(green);
		for(y=Y; y<Y+h; y++) {
			for(x=X; x<X+w; x++) {	
				G[i]=getPixel(x, y); i++;}}
		i=0;
		selectWindow(blue);
		for(y=Y; y<Y+h; y++) {
			for(x=X; x<X+w; x++) {
				B[i]=getPixel(x, y);  i++; }}
		RG[j]=DOBLE(R, G, w, h);
		GB[j]=DOBLE(G, B, w, h);
		BR[j]=DOBLE(B, R, w, h);
		RGB[j]=TRIPLE(R, G, B, w, h);
	j++;
	}
}
random("seed", 1);
W=2*W; H=2*H; w=2*w; h=2*h;
for(k=0; k<II; k++)
{
for(Y=0; Y<(H-h)+1;Y=Y+2) { 
	for(X=0; X<(W-w)+1; X=X+2) { 
		i=0;
		selectWindow(red);
		for(y=Y; y<Y+h; y++) {
			for(x=X; x<X+w; x++) {
				R[i]=getPixel(x, y); i++; }}
		i=0;
		selectWindow(green);
		for(y=Y; y<Y+h; y++) {
			for(x=X; x<X+w; x++) {	
				G[i]=getPixel(x, y); i++;}}
		i=0;
		selectWindow(blue);
		for(y=Y; y<Y+h; y++) {
			for(x=X; x<X+w; x++) {
				B[i]=getPixel(x, y);  i++; }}

		for(t=0; t<QI; t++) {
			
			





setBatchMode("exit and display");
}			
	

	