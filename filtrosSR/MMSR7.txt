// MMM

macro "Image Improver [i]" 
{



function FORCER1(scd, ssd, pi1, pi2, pf1, pf2)                 //Condicion de aceptacion de movidas de montecarlo
{
if(scd>ssd)
	{
	if(((pf1+1)*pf2)+((pi1-1)*pi2)>=(pf1*pf2)+(pi1*pi2))
		change=true;
		else
		change=false;
	}
if(scd<ssd)			
	{
	if(((pf1+1)*pf2)+((pi1-1)*pi2)>(pf1*pf2)+(pi1*pi2))
		change=false;
		else
		change=true;
	}
return change;
}


function FORCER2(sct, sst, pi1, pi2, pi3, pf1, pf2, pf3)
{
if(sct>sst)
	{
	if(((pf1+1)*pf3*pf2)+((pi1-1)*pi3*pi2)>=(pf1*pf3*pf2)+(pi1*pi3*pi2))
		change=true;
		else
		change=false;
	}
if(sct<sst)
	{
	if(((pf1+1)*pf3*pf2)+((pi1-1)*pi3*pi2)>(pf1*pf3*pf2)+(pi1*pi3*pi2))
		change=false;
		else
		change=true;
	}
return change;
}
//proof2=FORCER(sc[0], sc[2], sc[4], ss[0], ss[2], ss[4], g[fir], r[fir], b[fir], g[iir], r[iir], b[iir]);

function FORCER(sc1, sc2, sc3, ss1, ss2, ss3, pf1, pf2, pf3, pi1, pi2, pi3)    

{

if(sc1==ss1 && sc2==ss2 && sc3==ss3)
	change=false;
if(sc1!=ss1 && sc2!=ss2 && sc3!=ss3)
	{
	a=FORCER1(sc1, ss1, pi1, pi2, pf1, pf2);
	B=FORCER1(sc2, ss2, pi1, pi3, pf1, pf3);
	c=FORCER2(sc3, ss3, pi1, pi2, pi3, pf1, pf2, pf3);
	if(a+B+c>2)
		change=true;
		else
		change=false;
	}
if(sc1!=ss1 && sc2!=ss2 && sc3==ss3)
	{
	a=FORCER1(sc1, ss1, pi1, pi2, pf1, pf2);
	B=FORCER1(sc2, ss2, pi1, pi3, pf1, pf3);
	if(a+B>1)
		change=true;
		else
		change=false;
	}
if(sc1!=ss1 && sc2==ss2 && sc3!=ss3)
	{
	a=FORCER1(sc1, ss1, pi1, pi2, pf1, pf2);
	c=FORCER2(sc3, ss3, pi1, pi2, pi3, pf1, pf2, pf3);
	if(a+c>1)
		change=true;
		else
		change=false;
	}
if(sc1==ss1 && sc2!=ss2 && sc3!=ss3)
	{
	B=FORCER1(sc2, ss2, pi1, pi3, pf1, pf3);
	c=FORCER2(sc3, ss3, pi1, pi2, pi3, pf1, pf2, pf3);
	if(B+c>1)
		change=true;
		else
		change=false;
	}
if(sc1==ss1 && sc2==ss2 && sc3!=ss3)
	{
	c=FORCER2(sc3, ss3, pi1, pi2, pi3, pf1, pf2, pf3);
	if(c==true)
		change=true;
		else
		change=false;
	}
if(sc1==ss1 && sc2!=ss2 && sc3==ss3)
	{
	B=FORCER1(sc2, ss2, pi1, pi3, pf1, pf3);
	if(B==true)
		change=true;
		else
		change=false;
	}
if(sc1!=ss1 && sc2==ss2 && sc3==ss3)
	{
	a=FORCER1(sc1, ss1, pi1, pi2, pf1, pf2);
	if(a==true)
		change=true;
		else
		change=false;
	}
return change;
}


function VECTORIZAR(imagenAvectorizar, w, h)     //1: funcion para vectorizar imagenes                    
{
selectWindow(imagenAvectorizar);
vector=newArray(w*h);
  i = 0;
  for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		vector[i] = getPixel(x,y);
		i++;
		}
	}
return vector;
}


id1=getImageID();                                            //identificación de IDs
tamano=0;
figura=newArray(nImages);
for(i=id1-10000; i<id1+10000; i++)
	{
	if(isOpen(i) && tamano<nImages)
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}



Dialog.create("Image Improver");                    //genero ventana de inicio                                                      
   
  Dialog.addChoice("Source RGB:", figura);         
       Dialog.show();
   	
  	SRGB=Dialog.getChoice();


Dialog.create("Control relationships");                    //ventana de carga de relaciones                                                      
  Dialog.addNumber("Red and Green: ", -1);  
  Dialog.addNumber("Red and Blue:", -1);         
  Dialog.addNumber("Green and Blue: ", 1);  
  Dialog.addNumber("RED with green and blue:", -1);   
  Dialog.addNumber("GREEN with red and blue:", 1);         
  Dialog.addNumber("BLUE with red and green: ", -1);  
  Dialog.addNumber("Red, Green and Blue:", -1);   
  Dialog.addNumber("Iteration's limit (x1000): ", 10);   
  

Dialog.show();
sc=newArray(7);
   	sc[0]=Dialog.getNumber();
	sc[1]=Dialog.getNumber()
	sc[2]=Dialog.getNumber()
	sc[3]=Dialog.getNumber()
	sc[4]=Dialog.getNumber()
	sc[5]=Dialog.getNumber()	
	sc[6]=Dialog.getNumber()
	iLimit=Dialog.getNumber()*1000;
	


Dialog.create("Source Relationships");                    //ventana de carga de relaciones                                                      
  Dialog.addNumber("Red and Green: ", 1);  
  Dialog.addNumber("Red and Blue:", -1);         
  Dialog.addNumber("Green and Blue: ", 1);  
  Dialog.addNumber("RED with green and blue:", -1);   
  Dialog.addNumber("GREEN with red and blue:", 1);         
  Dialog.addNumber("BLUE with red and green: ", 1);  
  Dialog.addNumber("Red, Green and Blue:", 1);   
  
Dialog.show();
ss=newArray(7);
   	ss[0]=Dialog.getNumber();
	ss[1]=Dialog.getNumber()
	ss[2]=Dialog.getNumber()
	ss[3]=Dialog.getNumber()
	ss[4]=Dialog.getNumber()
	ss[5]=Dialog.getNumber()	
	ss[6]=Dialog.getNumber()
	

selectWindow(SRGB);                           // Comienza Montecarlo. Estados de colo de imagena a tratar 
rename("SRGB");
run("Duplicate...", "title=SRGB");
w = getWidth;              
h = getHeight;                                                 
run("Split Channels");
r=VECTORIZAR("SRGB (red)", w, h);
g=VECTORIZAR("SRGB (green)", w, h);
b=VECTORIZAR("SRGB (blue)", w, h);

selectWindow("SRGB (red)");
close();
selectWindow("SRGB (green)");
close();
selectWindow("SRGB (blue)");
close();


positives=0; verdes=0;  
        
random("seed", round(random*iLimit));

        
for(iteraciones=0; iteraciones<iLimit; iteraciones++) 
	{
	
	
	//do {
	do {
	iir=round(random*(w*h-1));  
	fir=round(random*(w*h-1));  	
	} while(r[fir]>254 || r[iir]<1 || r[iir]>=r[fir]) 
	proof1=FORCER(sc[0], sc[1], sc[3], ss[0], ss[1], ss[3], r[fir], g[fir], b[fir], r[iir], g[iir], b[iir]); 
	if(proof1==true)
	{
	r[fir]=r[fir]+1;
	r[iir]=r[iir]-1;
	positives++;
	}
	//} while(proof1==false)
	
	//do {                               
	do {
	iig=round(random*(w*h-1));  
	fig=round(random*(w*h-1));
	} while(g[fig]>254 || g[iig]<1 || g[iig]>=g[fig])
	proof2=FORCER(sc[0], sc[2], sc[4], ss[0], ss[2], ss[4], g[fir], b[fir], r[fir], g[iir], b[iir], r[iir]);
	if(proof2==true)
	{
	g[fig]=g[fig]+1;
	g[iig]=g[iig]-1;
	verdes++;
	}//} while(proof2==false)
         
	//do {                       
	do {
	iib=round(random*(w*h-1));  
	fib=round(random*(w*h-1));
	} while(b[fib]>254 || b[iib]<1 || b[iib]>=b[fib])
	proof3=FORCER(sc[1], sc[2], sc[5], ss[1], ss[2], ss[5], b[fir], g[fir], r[fir], b[iir], g[iir], r[iir]);	
	if(proof3==true)
	{
	b[fib]=b[fib]+1;
	b[iib]=b[iib]-1;
	positives++;
	}//} while(proof3==false)
	showStatus("Iteraciones: "+iteraciones+"       Movimientos: "+positives+"     "+verdes);
	}                              
 	
print("Iteraciones: "+iteraciones+"       Movimientos: "+positives+"    "+verdes);


newImage("Red", "8-bit black", w, h, 1);        // imagen final: merge de estas tres
selectWindow("Red");
i=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		setPixel(x,y, r[i]);
		i++;
		}
	} 

newImage("Green", "8-bit black", w, h, 1);        
selectWindow("Green");
i=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		setPixel(x,y, g[i]);
		i++;
		}
	} 

newImage("Blue", "8-bit black", w, h, 1);        
selectWindow("Blue");
i=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		setPixel(x,y, b[i]);
		i++;
		}
	} 

run("Merge Channels...", "c1=Red c2=Green c3=Blue create");
setBatchMode("exit and display");

}    //FIN

