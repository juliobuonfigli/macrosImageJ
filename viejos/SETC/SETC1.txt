
/*
SETC (Significancia Estadística de la Triple Colocalización)
Julio Buonfigli
Prototipo 14

-Calcula triple colocalización usando el coeficiente de Pearson y colocalización entre pixels.
-Calcula la significancia estadística para colocalización entre pixels.
-Muestra resultados gráficos, imagen de triple colocalización.
*/
//Kota Miura




// CARGA DE DATOS

requires("1.29p")              //muestra un mensaje si la versión de imagej usada no es compatible

id1=getImageID();          //identificación de IDs
tamano=0;
figura=newArray(30);
for(i=id1-1000; i<id1+1000; i++)
	{
	if(isOpen(i))
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}

  Dialog.create("SETC");    //genero ventana de inicio
                                                                    
  Dialog.addChoice("Rojo:", figura);         
  Dialog.addChoice("Verde:", figura);          
  Dialog.addChoice("Azul:", figura);    
  Dialog.addChoice("Máscara:", figura);  
  Dialog.addCheckbox("Calcular significancia estadística", true);
  Dialog.addNumber("Número de imágenes generadas:", 5); 
  Dialog.addCheckbox("Mostrar ejemplo de imagen aleatoria", false);
  Dialog.addCheckbox("Calcular coeficiente de Pearson", false); 
  
       Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	azul=Dialog.getChoice();
   	mascara=Dialog.getChoice();
   	generadas=Dialog.getCheckbox();
	numGeneradas=Dialog.getNumber();
   	imagenAleatoria=Dialog.getCheckbox();
	pearson=Dialog.getCheckbox();






//SENTENCIAS USADAS EN VARIOS BLOQUES

if(numGeneradas>50)
	exit("El número de imágenes generadas no puede ser mayor a 50");   

selectWindow(rojo);
run("8-bit");
updateDisplay();
selectWindow(verde);
run("8-bit");
updateDisplay();
selectWindow(azul);
run("8-bit");
updateDisplay();

w = getWidth;                                  //cargo tamaño de imagen
h = getHeight;

imageCalculator("AND create", azul, mascara);                       //opero imagenes con la máscara
rename("azulAndMascara");
imageCalculator("AND create", verde, mascara);  
rename("verdeAndMascara");
imageCalculator("AND create", rojo, mascara);   
rename("rojoAndMascara");


function contarUnos(ventana)                     //Declaro una función que cuenta unos
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==255)
		sumador++;
	}
return sumador;
}

function contarCeros(ventana)                     //Declaro una función que cuenta ceros
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==0)
		sumador++;
	}
return sumador;
}

unosMascara=contarUnos(mascara);                        //cuento unos y ceros en la mascara
cerosMascara=contarCeros(mascara);

if(unosMascara+cerosMascara!=w*h)
	exit("Binarizar la máscara antes de ejecutar la aplicación");

function sumarPixInt(ventana)                     //Declaro una función que suma intensidades de todos los pixeles
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   suma=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	suma=suma+a[i];
	}
return suma;
}






// CALCULO DE COEFICIENTE DE PEARSON

if(pearson==true)
{

showStatus("Calculando coeficiente de Pearson...");

sumRojo=sumarPixInt("rojoAndMascara");                     //sumo intensidades en cada imagen
sumVerde=sumarPixInt("verdeAndMascara");
sumAzul=sumarPixInt("azulAndMascara");

pr=sumRojo/unosMascara;                                    //calculo promedios de intensidad para cada imagen 
pv=sumVerde/unosMascara;
pa=sumAzul/unosMascara;

   numVA=0;                        //inicializo variables de coeficiente de pearson
   numRA=0; 
   nunRV=0;
   numTriple=0;
   denR=0;
   denV=0;
   denA=0;
  
selectWindow("rojoAndMascara");        //obtengo el valor de cada pixel para cada imagen y los transformo en vectores unidimensionales	
   r = newArray(w*h);    
   i = 0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		r[i++] = getPixel(x,y);
	}

selectWindow("verdeAndMascara");	
  v = newArray(w*h);
  i = 0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		v[i++] = getPixel(x,y);
	}

selectWindow("azulAndMascara");	   
  a = newArray(w*h);
  i = 0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}


for(i=0; i<w*h; i++)                                     //calculo todas la series                
	{
	showStatus("Calculando coeficiente de Pearson...");
	denR=denR+(r[i]-pr)*(r[i]-pr);                                             
	denV=denV+(v[i]-pv)*(v[i]-pv);
	denA=denA+(a[i]-pa)*(a[i]-pa);
	numVA=numVA+(v[i]-pv)*(a[i]-pa);
	numRA=numRA+(r[i]-pr)*(a[i]-pa);
	numRV=numRV+(r[i]-pr)*(v[i]-pv);
	numTriple=numTriple+(r[i]-pr)*(v[i]-pv)*(a[i]-pa);
	}

denRV=sqrt(denR*denV);                             //calculo coeficientes
denRA=sqrt(denR*denA);
denVA=sqrt(denA*denV);
denTriple=sqrt(denR*denV*denA);

PrRV=numRV/denRV;
PrRA=numRA/denRA;
PrVA=numVA/denVA;
PrTriple=numTriple/denTriple;

showStatus("");

}
 







//BINARIZACIÓN


  
  Dialog.create("Binarización");                                                                                                                                                 //cuadro de diálogo de selección de tipo de binarización                                         
  Dialog.addChoice("Seleccione el tipo de binarización", newArray("manual", "porcentual", "según intensidad promedio")); 
        Dialog.show();
	bin=Dialog.getChoice();
   	
if(bin=="según intensidad promedio")
{

if(pearson==false)
{
sumRojo=sumarPixInt("rojoAndMascara");                     //sumo intensidades en cada imagen
sumVerde=sumarPixInt("verdeAndMascara");
sumAzul=sumarPixInt("azulAndMascara");
}

pr=sumRojo/unosMascara;                                    //calculo promedios de intensidad para cada imagen 
pv=sumVerde/unosMascara;
pa=sumAzul/unosMascara;                   // o deberia ser sobre (w*h)


selectWindow("rojoAndMascara");            //binariza canal rojo segun intensidad promedio   
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{	
		showStatus("Binarizando imágenes...");
		a = getPixel(x,y);
		if(a>pr*3)
			setPixel(x, y, 255);
			else
			setPixel(x, y, 0);
		}

	}
updateDisplay();


selectWindow("verdeAndMascara");      //binariza canal verde según intensidad promedio
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{	
		showStatus("Binarizando imágenes...");
		a = getPixel(x,y);
		if(a>pv*3)
			setPixel(x, y, 255);
			else
			setPixel(x, y, 0);
		}

	}
updateDisplay();


selectWindow("azulAndMascara");    //binariza canal azul según intensidad promedio    
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{	
		showStatus("Binarizando imágenes...");
		a = getPixel(x,y);
		if(a>pa*3)
			setPixel(x, y, 255);
			else
			setPixel(x, y, 0);
		}

	}
updateDisplay();

}

if(bin=="porcentual")
{


Dialog.create("Porcentage de pixels blancos dentro de la selección");                           //cuadro de diálogo para seleccionar porcentage de pixeles blancos
Dialog.addNumber("Rojo: ", 5); 
Dialog.addNumber("Verde: ", 5); 
Dialog.addNumber("Azul: ", 5); 
   Dialog.show();
	porR=Dialog.getNumber();
	porV=Dialog.getNumber();
	porA=Dialog.getNumber();

if(porR>30 || porV>30 || porA>30)
	exit("Ningún porcentage de binarización puede exceder el 30%");   

coeR=porR/100;
coeV=porV/100;
coeA=porA/100;

unos=0;
t=255;
selectWindow("rojoAndMascara");       //binariza el canal rojo según el porcentage cargado    
while(unos<coeR*unosMascara)
{
showStatus("Binarizando imágenes...");
unos = 0; 
for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a==255)
			unos++;
		}
	}

t--;
for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a==t && unos<coeR*unosMascara)
			{
			setPixel(x, y, 255);
			unos++;
			}
		}
	}
}

for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a!=255)
			setPixel(x, y, 0);
		}
	}
updateDisplay();

unos=0;
t=255;
selectWindow("verdeAndMascara");        //binariza el canal verde según el porcentage cargado
while(unos<coeV*unosMascara)
{
showStatus("Binarizando imágenes...");
unos = 0; 
for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a==255)
			unos++;
		}
	}

t--;
for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a==t && unos<coeV*unosMascara)
			{
			setPixel(x, y, 255);
			unos++;
			}
		}
	}
}

for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a!=255)
			setPixel(x, y, 0);
		}
	}
updateDisplay();


unos=0;
t=255;
selectWindow("azulAndMascara");          //binariza el canal azul según el porcentage cargado    
while(unos<coeA*unosMascara)
{
showStatus("Binarizando imágenes...");
unos = 0; 
for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a==255)
			unos++;
		}
	}

t--;
for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a==t && unos<coeA*unosMascara)
			{
			setPixel(x, y, 255);
			unos++;
			}
		}
	}
}

for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a!=255)
			setPixel(x, y, 0);
		}
	}
updateDisplay();
}



if(bin=="manual")                                     //binarización manual
{  
selectWindow("rojoAndMascara");
run("Threshold...");                                                                    
waitForUser("Binarización manual", "Pulse OK luego de binarizar rojoAndMascara");
updateDisplay();
selectWindow("verdeAndMascara");                                                             
waitForUser("Binarización manual", "Pulse OK luego de binarizar verdeAndMascara");
updateDisplay();
selectWindow("azulAndMascara");                                           
waitForUser("Binarización manual", "Pulse OK luego de binarizar azulAndMascara");
updateDisplay();
}







// RESULTADOS GRÁFICOS

showStatus("Generando resultados gráficos...");
                   
cerosRojos=contarCeros("rojoAndMascara");                     //cuento ceros en cada canal
cerosVerdes=contarCeros("verdeAndMascara");
cerosAzules=contarCeros("azulAndMascara");

cerosRandRojos=cerosRojos-cerosMascara;                       // calculo la cantidad de ceros dentro de la máscara para cada color
cerosRandVerdes=cerosVerdes-cerosMascara;
cerosRandAzules=cerosAzules-cerosMascara;


run("Merge Channels...", "c1=[rojoAndMascara] c2=[verdeAndMascara] c3=[azulAndMascara] create keep");    //Genero imagen de triple colocalización
rename("Colocalización");
updateDisplay();

if(imagenAleatoria==true)
{
selectWindow(mascara);                                                          //muestro ejemplo de imagen aleatoria
	run("Duplicate...", "title=RojoAleatorio");
	z=0;
            f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=cerosRandRojos/unosMascara)
					setPixel(x, y, 0);
			}
		}
	run("Red");
	updateDisplay();
}









// COLOCALIZACIÓN DE PIXELS        

setBatchMode(true);         //evita que se habran las imágenes en proceso y agliza la ejecución

showStatus("Calculando colocalización de pixels...");

imageCalculator("AND create", "rojoAndMascara", "verdeAndMascara");     //opero para obtener doble colocalización
rename("rojoAndVerde");
imageCalculator("AND create", "azulAndMascara", "rojoAndMascara");  
rename("rojoAndAzul");
imageCalculator("AND create", "verdeAndMascara", "azulAndMascara");  
rename("verdeAndAzul");

imageCalculator("AND create", "rojoAndVerde", "azulAndMascara");     //obtengo triple colocalización
rename("TripleColocalizacion");

imageCalculator("OR create", "rojoAndMascara", "verdeAndMascara");    //Calculo la superficie cubierta total dentro de la máscara
rename("rojoOrVerde");
imageCalculator("OR create", "rojoOrVerde", "azulAndMascara");                 
rename("OR");

unosRvam=contarUnos("TripleColocalizacion");             // cuento pixeles de triple colo

unosRojos=contarUnos("rojoAndMascara");                     //cuento unos en cada canal
unosVerdes=contarUnos("verdeAndMascara");
unosAzules=contarUnos("azulAndMascara");

unosRV=contarUnos("rojoAndVerde");                       //cuento unos de doble colo
unosRA=contarUnos("rojoAndAzul");
unosVA=contarUnos("verdeAndAzul");

unosRvamOr=contarUnos("OR");                           //cuento unos en el triple OR

rv=(unosRV/unosRojos)*100;                            //calculo coeficientes de colocalización
vr=(unosRV/unosVerdes)*100;
ra=(unosRA/unosRojos)*100;
ar=(unosRA/unosAzules)*100;
va=(unosVA/unosVerdes)*100;
av=(unosVA/unosAzules)*100;
rvasc=(unosRvam/unosRvamOr)*100;
rvaenr=(unosRvam/unosRojos)*100;
rvaenv=(unosRvam/unosVerdes)*100;
rvaena=(unosRvam/unosAzules)*100;

selectWindow("TripleColocalizacion");         //cierro imágenes para que no interfieran con futuras corridas
close();
selectWindow("rojoOrVerde");
close();
selectWindow("OR");
close();










//  SIGNIFICANCIA ESTADÍSTICA

if(generadas==true)
{

showStatus("Calculando significancia estadística...");

rrv=newArray(numGeneradas);                           //Defino arreglos para cada indice de colocalización
rvr=newArray(numGeneradas);
rra=newArray(numGeneradas);
rar=newArray(numGeneradas);
rva=newArray(numGeneradas);
rav=newArray(numGeneradas);
rrvasc=newArray(numGeneradas);
rrvaenr=newArray(numGeneradas);
rrvaenv=newArray(numGeneradas);
rrvaena=newArray(numGeneradas);

pcrrv=0;		                                       //Inicializo contadores positivos
pcrvr=0;	
pcrra=0;
pcrar=0;
pcrva=0;
pcrav=0;
pcrrvasc=0;
pcrrvaenr=0;
pcrrvaenv=0;
pcrrvaena=0;

ncrrv=0;		                                       //Inicializo contadores negativos
ncrvr=0;
ncrra=0;
ncrar=0;
ncrva=0;
ncrav=0;
ncrrvasc=0;
ncrrvaenr=0;
ncrrvaenv=0;
ncrrvaena=0;

rvvr=rv+vr;                                            //variables útiles en condicionales de triple colocalización            
arra=ra+ar;
vaav=va+av;



for(s=0; s<numGeneradas; s++)                        //rulo para generar tantas imágenes aleatorias para cada fluoróforo como se cargue en el diálogo de entrada
	{
	beep();
	
	selectWindow(mascara);                            //genero una imagen aleatoria para el canal rojo
	run("Duplicate...", "title=RandRojo");
	z=0;
            f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=cerosRandRojos/unosMascara)
			setPixel(x, y, 0);
			}
		}
		
	updateDisplay();


	selectWindow(mascara);                            //genero una imagen aleatoria para el canal verde
	run("Duplicate...", "title=RandVerde");
	z=0;
   	f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=cerosRandVerdes/unosMascara)
				setPixel(x, y, 0);
			
			}
		}
	updateDisplay();


	selectWindow(mascara);                            //genero una imagen aleatoria para el canal azul
	run("Duplicate...", "title=RandAzul");
	z=0;
   	f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=cerosRandAzules/unosMascara)
				setPixel(x, y, 0);
			}
		}
	updateDisplay();
	
	imageCalculator("AND create", "RandRojo", "RandVerde");     //opero para obtener doble colocalización
	rename("RandRojoAndRandVerde");
	imageCalculator("AND create", "RandRojo", "RandAzul");  
	rename("RandRojoAndRandAzul");
	imageCalculator("AND create", "RandVerde", "RandAzul");  
	rename("RandVerdeAndRandAzul");
	
	if(rvvr>=vaav && rvvr>=arra)
		{													
		imageCalculator("AND create", "RandAzul", "rojoAndVerde");     // chequeo cual es color que menos colocaliza con el resto y obtengo triple colocalización
		rename("RandTripleColocalizacion");
		}
	if(vaav>=rvvr && vaav>=arra)
		{													
		imageCalculator("AND create", "RandRojo", "verdeAndAzul");   
		rename("RandTripleColocalizacion");
		}
	if(arra>=vaav &&  arra>=rvvr)
		{													
		imageCalculator("AND create", "RandVerde", "rojoAndAzul");  
		rename("RandTripleColocalizacion");
		}
	
	RandunosRvam=contarUnos("RandTripleColocalizacion");         //Cuento la cantidad de pixeles de triple colo
	
	RandunosRV=contarUnos("RandRojoAndRandVerde");    //cueno pixeles de doble colo 
	RandunosRA=contarUnos("RandRojoAndRandAzul"); 
	RandunosVA=contarUnos("RandVerdeAndRandAzul"); 

	
// la superficie cubierta total aleatoria es la misma que la del ensayo
// igual que el total de unos para cada color son los del ensayo


	rrv[s]=(RandunosRV/unosRojos)*100;                            //calculo coeficientes de colocalización
	rvr[s]=(RandunosRV/unosVerdes)*100;
	rra[s]=(RandunosRA/unosRojos)*100;
	rar[s]=(RandunosRA/unosAzules)*100;
	rva[s]=(RandunosVA/unosVerdes)*100;
	rav[s]=(RandunosVA/unosAzules)*100;	
	rrvasc[s]=(RandunosRvam/unosRvamOr)*100;
	rrvaenr[s]=(RandunosRvam/unosRojos)*100;
	rrvaenv[s]=(RandunosRvam/unosVerdes)*100;
	rrvaena[s]=(RandunosRvam/unosAzules)*100;

	if(rrv[s]<=rv)                           //Para cada coeficiente de colocalización cuento cuantas veces fue mayor el generado al azar
		pcrrv++;
		else
		ncrrv++;	
	if(rvr[s]<=vr)
		pcrvr++;
		else
		ncrvr++;
	if(rra[s]<=ra)
		pcrra++;
		else
		ncrra++;
	if(rar[s]<=ar)
		pcrar++;
		else
		ncrar++;	
	if(rva[s]<=va)
		pcrva++;
		else
		ncrva++;
	if(rav[s]<=av)
		pcrav++;
		else
		ncrav++;
	if(rrvasc[s]<=rvasc)
		pcrrvasc++;
		else
		ncrrvasc++;	
	if(rrvaenr[s]<=rvaenr)
		pcrrvaenr++;
		else
		ncrrvaenr++;	
	if(rrvaenv[s]<=rvaenv)
		pcrrvaenv++;
		else
		ncrrvaenv++;
	if(rrvaena[s]<=rvaena)
		pcrrvaena++;
		else
		ncrrvaena++;	
	

selectWindow("RandRojo");                           //cierro imágenes para que no interfieran en el próximo ciclo del lazo	
close();
selectWindow("RandVerde");
close();
selectWindow("RandAzul");
close();
selectWindow("RandRojoAndRandVerde");
close();	
selectWindow("RandRojoAndRandAzul");
close();
selectWindow("RandVerdeAndRandAzul");
close();
selectWindow("RandTripleColocalizacion");
close();
	
}


sumRrv=0;                          //inicializo variables de suma para promedios
sumRvr=0;
sumRra=0;
sumRvr=0;
sumRar=0;
sumRva=0;
sumRav=0;
sumRrvasc=0;
sumRrvaenr=0;
sumRrvaenv=0;
sumRrvaena=0;


for(i=0; i<numGeneradas; i++)         //sumo
	{	
	sumRrv=sumRrv+rrv[i];
	sumRvr=sumRvr+rvr[i];
	sumRra=sumRra+rra[i];
	sumRar=sumRar+rar[i];
	sumRva=sumRva+rva[i];
	sumRav=sumRav+rav[i];
	sumRrvasc=sumRrvasc+rrvasc[i];
	sumRrvaenr=sumRrvaenr+rrvaenr[i];
	sumRrvaenv=sumRrvaenv+rrvaenv[i];
	sumRrvaena=sumRrvaena+rrvaena[i];
	}
	
promRrv=sumRrv/numGeneradas;                                    //promedio
promRvr=sumRvr/numGeneradas; 
promRra=sumRra/numGeneradas; 
promRar=sumRar/numGeneradas; 
promRva=sumRva/numGeneradas; 
promRav=sumRav/numGeneradas;
promRrvasc=sumRrvasc/numGeneradas; 
promRrvaenr=sumRrvaenr/numGeneradas; 
promRrvaenv=sumRrvaenv/numGeneradas; 
promRrvaena=sumRrvaena/numGeneradas; 

}

showStatus("");






//RESULTADOS

selectWindow("rojoAndVerde");               //cierro imágenes para que no interfieran con futuras corridas de la aplicación
close();
selectWindow("rojoAndAzul");
close();
selectWindow("verdeAndAzul");
close();


if(pearson==false)
{
PrRV="  ******";                                                  //variables que no se calculan
PrRA="  ******";
PrVA="  ******";
PrTriple="  ******";
}

if(generadas==false)
{
promRrv="  ******";      
promRvr="  ******"; 
promRra="  ******"; 
promRar="  ******";
promRva="  ******";
promRav="  ******"; 
promRrvasc="  ******"; 
promRrvaenr="  ******"; 
promRrvaenv="  ******";
promRrvaena="  ******";
pcrrv="  ******";                                       
pcrvr="  ******";	 
pcrra="  ******"; 
pcrar="  ******"; 
pcrva="  ******";
pcrav="  ******"; 
pcrrvasc="  ******";  
pcrrvaenr="  ******"; 
pcrrvaenv="  ******";
pcrrvaena="  ******"; 
ncrrv="  ******";                                       
ncrvr="  ******"; 
ncrra="  ******";
ncrar="  ******"; 
ncrva="  ******";
ncrav="  ******"; 
ncrrvasc="  ******";
ncrrvaenr="  ******";
ncrrvaenv="  ******";
ncrrvaena="  ******";
}

titulo1 = "Resultados";                                            //genero cuadro que muestra resultados
titulo2 = "["+titulo1+"]";
  f = titulo2;
 if (isOpen(titulo1))
    print(f, "\\Clear");
 else
run("Table...", "name="+titulo1+" width=250 height=600");
print(f, "\\Headings:canales\tPearson\tintersección\taleatorizaciones\tnº de mayores \tnº de menores");
print(f, " Rojo en verde"+"\t  "+PrRV+"\t  "+rv+"\t  "+promRrv+"\t  "+ncrrv+"\t  "+pcrrv);
print(f, " Verde en rojo"+"\t  "+PrRV+"\t  "+vr+"\t  "+promRvr+"\t  "+ncrvr+"\t  "+pcrvr);
print(f, " Rojo en azul"+"\t  "+PrRA+"\t  "+ra+"\t  "+promRra+"\t  "+ncrra+"\t  "+pcrra);
print(f, " Azul en rojo"+"\t  "+PrRA+"\t  "+ar+"\t  "+promRar+"\t  "+ncrar+"\t  "+pcrar);
print(f, " Verde en azul"+"\t  "+PrVA+"\t  "+va+"\t  "+promRva+"\t  "+ncrva+"\t  "+pcrva);
print(f, " Azul en verde"+"\t  "+PrVA+"\t  "+av+"\t  "+promRav+"\t  "+ncrva+"\t  "+pcrav);
print(f, "");
print(f, " Triple general"+"\t  "+PrTriple+"\t  "+rvasc+"\t  "+promRrvasc+"\t  "+ncrrvasc+"\t  "+pcrrvasc);
print(f, " Triple según rojo"+"\t  "+PrTriple+"\t  "+rvaenr+"\t  "+promRrvaenr+"\t  "+ncrrvaenr+"\t  "+pcrrvaenr);
print(f, " Triple según verde"+"\t  "+PrTriple+"\t  "+rvaenv+"\t  "+promRrvaenv+"\t  "+ncrrvaenv+"\t  "+pcrrvaenv);
print(f, " Triple según azul"+"\t  "+PrTriple+"\t  "+rvaena+"\t  "+promRrvaena+"\t  "+ncrrvaena+"\t  "+pcrrvaena);




/*
print(unosRojos);
print(unosVerdes);                                         //sentencias de prueba de código
print(unosAzules);
print(cerosRandRojos);
print(cerosRandVerdes);
print(cerosRandAzules);
print(unosMascara);
print(cerosMascara);
*/


//fin
