macro "Doble Colocalizacion [r]" 
{

// SENTENCIAS INTRODUCTORIAS
{

requires("1.29p");                      //muestra un mensaje si la versión de imagej usada no es compatible

id1=getImageID();                        //identificación de IDs
tamano=0;
figura=newArray(nImages);
for(i=id1-10000; i<id1+10000; i++)
	{
	if(isOpen(i) && tamano<nImages)
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}


  Dialog.create("SETC");    //genero ventana de inicio
                                                                    
  Dialog.addChoice("Rojo:", figura);         
  Dialog.addChoice("Verde:", figura);          
  Dialog.addChoice("Máscara:", figura);  
  Dialog.addCheckbox("Calcular coeficientes de Pearson y Manders", true);
  Dialog.addCheckbox("Significancia estadística de Manders", false); 
  Dialog.addCheckbox("Calcular porcentajes de Intersección", true);
  Dialog.addCheckbox("Significancia estadística de porcentajes de intersección", false); 
  Dialog.addNumber("Número de imágenes generadas:", 50); 
  Dialog.addChoice("Nivel de significancia:", newArray(0.05, 0.01));
  Dialog.addCheckbox("Circunscribir máscara", false);
  Dialog.addNumber("Extensión de la máscara circunscripta (pixels):", 1); 
  
  
       Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	mascara=Dialog.getChoice();
   	pearson=Dialog.getCheckbox();
	generadasP=Dialog.getCheckbox();
	interseccion=Dialog.getCheckbox();
	generadasI=Dialog.getCheckbox();
	numGeneradas=Dialog.getNumber();
    nivel=Dialog.getChoice();
    intOR=Dialog.getCheckbox();
   	vecindad=Dialog.getNumber();
	

if(pearson==false && interseccion==false)                                           
	exit("Seleccionar al menos un casillero de coeficientes");   
if(numGeneradas>1000)
	exit("Elegir un número de imágenes generadas entre 5 y 1000");   
if(vecindad>50)
	exit("La extensión de la máscara no puede exceder los 50 pixels");   

selectWindow(mascara);
run("Select None");

selectWindow(rojo);
run("8-bit");
selectWindow(verde);
run("8-bit");

w = getWidth;                                  //cargo tamaño de imagen
h = getHeight;

if(nivel==0.05)                                        //correlaciono z con sus valores de significancia
	zCola=-1.64486;
	else
	zCola=-2.32635;

imageCalculator("AND create", verde, mascara);     //opero imágenes con la máscara
rename("verdeAndMascara");
imageCalculator("AND create", rojo, mascara);   
rename("rojoAndMascara");

selectWindow(mascara);	                                    //vectorizo la máscara y cuento unos
  masc = newArray(w*h);
  i = 0;
  unosMascara = 0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		masc[i] = getPixel(x,y);
		if(masc[i]=255)
				unosMascara++;
		i++;		
		}
	}

selectWindow("rojoAndMascara");	                        //vectorizo canal rojo, sumo intensidades y cuento ceros
  r = newArray(unosMascara);
  i = 0;
  mas=0;
  sumRojo=0;
  cerosRojos=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		if(masc[mas]==255)
			{
			r[i] = getPixel(x,y);
			if(r[i]==0)
				cerosRojos++;
			sumRojo=sumRojo+r[i];
			i++;
			}
		mas++;
		}
	}
	
selectWindow("verdeAndMascara");	                        //vectorizo canal verde, sumo intensidades y cuento ceros
  v = newArray(unosMascara);
  i = 0;
  mas=0;
  sumVerde=0;
  cerosVerdes=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		if(masc[mas]==255)
			{
			v[i] = getPixel(x,y);
			if(v[i]==0)
				cerosVerdes++;
			sumVerde=sumVerde+v[i];
			i++;
			}
		mas++;
		}
	}

pr=sumRojo/unosMascara;                                    //calculo promedios de intensidad para cada imagen 
pv=sumVerde/unosMascara;


}


// CALCULO COEFICIENTE DE PEARSON
{
if(pearson==true)
{
   nunRV=0;
   denR=0;
   denV=0;

for(i=0; i<unosMascara; i++)                                     //calculo todas las series                
	{
	showStatus("Calculando coeficiente de Pearson...");
	denR=denR+(r[i]-pr)*(r[i]-pr);                                                                 //Pearson                                          
	denV=denV+(v[i]-pv)*(v[i]-pv);
	numRV=numRV+(r[i]-pr)*(v[i]-pv);
	}

denRV=sqrt(denR*denV);                             //calculo coeficientes de Pearson

PrRV=numRV/denRV;                                     
}
}


//UMBRAL
{	
Dialog.create("UMBRAL");                                                                                                                                                                                       //cuadro de diálogo de selección de tipo de binarización                                         
 Dialog.addChoice("Seleccione el criterio de elección de umbral", newArray("por defecto", "según intensidad promedio", "fijar por canal"));
        Dialog.show();
	bin=Dialog.getChoice();

if(bin=="por defecto")
{
if(interseccion==true)
{
selectWindow("rojoAndMascara");
run("Make Binary");
selectWindow("verdeAndMascara");                                                             
run("Make Binary");                              
}
MUR=1;
MUV=1;
}
  	
if(bin=="según intensidad promedio")
{
 Dialog.create("Factor de Multiplicación");                                                                                                                                                                                        
 Dialog.addChoice("Seleccione el factor de multiplicación", newArray(0.125, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 3.25, 3.5, 3.75, 4)); 
 Dialog.addMessage("El umbral será la intensidad promedio de cada canal por el factor de multiplicación.");           
       Dialog.show();
	factorP=Dialog.getChoice();
            
MUR=pr*factorP;
MUV=pv*factorP;

if(interseccion==true)
{
selectWindow("rojoAndMascara");           
setThreshold(MUR, 255);
run("Convert to Mask");
selectWindow("verdeAndMascara");      
setThreshold(MUV, 255);
run("Convert to Mask");
}
}

if(bin=="fijar por canal")          
                                                                  //binarización manual
{  
Dialog.create("Umbral");    //genero ventana de inicio                                                       
  
  Dialog.addNumber("Rojo:", 1); 
  Dialog.addNumber("Verde:", 1); 
       
Dialog.show();
	MUR=Dialog.getNumber();
	MUV=Dialog.getNumber();
   	
if(interseccion==true)
{
selectWindow("rojoAndMascara");           
setThreshold(MUR, 255);
run("Convert to Mask");
selectWindow("verdeAndMascara");      
setThreshold(MUV, 255);
run("Convert to Mask");
}
}

if(intOR==true)                              // genera masacar circunscripta
	{
	selectWindow(mascara);
    rename("Mascara");
	Mascara=getTitle();
	imageCalculator("OR create", "rojoAndMascara", "verdeAndMascara");          	
	run("Mean...", "radius=vecindad");  
	setThreshold(1, 255);
	run("Convert to Mask");
	rename("MascaraCircunscripta");
	mascara=getTitle();
	}
	
if(pearson==true)
{
if(bin=="fijar por canal" || bin=="según intensidad promedio")
{
selectWindow("rojoAndMascaraM");            //binariza canal rojo segun intensidad promedio   
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{	
		a = getPixel(x,y);
		if(a<MUR)
			setPixel(x, y, 0);
		}

	}
updateDisplay();

selectWindow("verdeAndMascaraM");      //binariza canal verde según intensidad promedio
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{	
		a = getPixel(x,y);
		if(a<MUV)
			setPixel(x, y, 0);
		}

	}
updateDisplay();
}
}
}
	

