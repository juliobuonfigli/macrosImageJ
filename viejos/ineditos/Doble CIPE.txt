
/*
CIPE (Colocalización de intersección y probabilidad de error)
Julio Buonfigli
Hipergeométrico
*/

macro "CIPE" {


if(isOpen("rojoAndMascara"))
	{
	selectWindow("rojoAndMascara");
	close();
	}
if(isOpen("verdeAndMascara"))
	{
	selectWindow("verdeAndMascara");
	close();
	}

requires("1.29p");              //muestra un mensaje si la versión de imagej usada no es compatible

id1=getImageID();          //identificación de IDs
tamano=0;
figura=newArray(nImages*2);
for(i=id1-800; i<id1+800; i++)
	{
	if(isOpen(i))
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}



  Dialog.create("SETC");    //genero ventana de inicio
                                                                    
  Dialog.addChoice("Rojo:", figura);         
  Dialog.addChoice("Verde:", figura);          
  Dialog.addChoice("Máscara:", figura);  
  
       Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	mascara=Dialog.getChoice();



selectWindow(mascara);
run("Select None");

selectWindow(rojo);
run("8-bit");
selectWindow(verde);
run("8-bit");

w = getWidth;                                  //cargo tamaño de imagen
h = getHeight;

imageCalculator("AND create", verde, mascara);     //opero imágenes con la máscara
rename("verdeAndMascara");
imageCalculator("AND create", rojo, mascara);   
rename("rojoAndMascara");

setBatchMode(true);

function contarUnos(ventana)                     //Declaro una función que cuenta unos
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==255)
		sumador++;
	}
return sumador;
}


unosMascara=contarUnos(mascara);                        //cuento unos y ceros en la mascara

selectWindow("rojoAndMascara");
run("Make Binary");
selectWindow("verdeAndMascara");                                                             
run("Make Binary");


// COLOCALIZACIÓN DE INTERSECCIÓN        

imageCalculator("AND create", "rojoAndMascara", "verdeAndMascara");     //opero para obtener doble colocalización
rename("rojoAndVerde");

unosRojos=contarUnos("rojoAndMascara");                     //cuento unos en cada canal
unosVerdes=contarUnos("verdeAndMascara");

unosRV=contarUnos("rojoAndVerde");                       //cuento unos de doble colo

rv=(unosRV/unosRojos)*100;                            //calculo coeficientes de colocalización
vr=(unosRV/unosVerdes)*100;
supTot=(unosRV/(unosRojos+unosVerdes-unosRV))*100;


//PROBABILIDAD DE ERROR

if(unosMascara>100000)        
	{                                                   
	N=round(unosMascara/10000);
	k=round(unosRojos/10000);
	n=round(unosVerdes/10000);
	x=round(unosRV/10000);
	}
	else
	{
	if(unosMascara>10000)        
		{                                                   
		N=round(unosMascara/1000);
		k=round(unosRojos/1000);
		n=round(unosVerdes/1000);
		x=round(unosRV/1000);
		}
		else
		{
		if(unosMascara>1000)        
			{                                                   
			N=round(unosMascara/100);
			k=round(unosRojos/100);
			n=round(unosVerdes/100);
			x=round(unosRV/100);
			}
			else
			{
			if(unosMascara>170)        
				{                                                   
				N=round(unosMascara/10);
				k=round(unosRojos/10);
				n=round(unosVerdes/10);
				x=round(unosRV/10);
				}
				else
				{                                                   
				N=unosMascara;
				k=unosRojos;
				n=unosVerdes;
				x=unosRV;
				}
			}
		}
	}


Nmenosk=N-k;
Nmenosn=N-n;

kFac=1;
for(i=1;i<=k;i++)
kFac=kFac*i;

nFac=1;
for(i=1;i<=n;i++)
nFac=nFac*i;

NFac=1;
for(i=1;i<=N;i++)
NFac=NFac*i;

NmenoskFac=1;
for(i=1;i<=Nmenosk;i++)
NmenoskFac=NmenoskFac*i;

NmenosnFac=1;
for(i=1;i<=Nmenosn;i++)
NmenosnFac=NmenosnFac*i;

X=x;
pe=0;

for(h=x;h<=n;h++)
{

kmenosx=k-X;
nmenosx=n-X;
denominador=Nmenosk-nmenosx;
denominador2=Nmenosn-kmenosx;

xFac=1;
for(i=1;i<=X;i++)
xFac=xFac*i;

kmenosxFac=1;
for(i=1;i<=kmenosx;i++)
kmenosxFac=kmenosxFac*i;

nmenosxFac=1;
for(i=1;i<=nmenosx;i++)
nmenosxFac=nmenosxFac*i;

denominadorFac=1;
for(i=1;i<=denominador;i++)
denominadorFac=denominadorFac*i;

denominador2Fac=1;
for(i=1;i<=denominador2;i++)
denominador2Fac=denominador2Fac*i;

pa=((kFac/(xFac*kmenosxFac))*(NmenoskFac/(nmenosxFac*denominadorFac)))/(NFac/(nFac*NmenosnFac));

pe=pe+pa;

X=X+1;
}

//RESULTADOS


selectWindow("rojoAndVerde");               //cierro imágenes para que no interfieran con futuras corridas de la aplicación
close();

titulo1 = "Resultados";                                            //genero cuadro que muestra resultados
titulo2 = "["+titulo1+"]";
  f = titulo2;
 if (isOpen(titulo1))
    print(f, "\\Clear");
 else
run("Table...", "name="+titulo1+" width=250 height=600");
print(f, "\\Headings:para\t% intersección\t Valor p");
print(f, " Rojo en verde"+"\t  "+rv+"\t  "+pe);
print(f, " Verde en rojo"+"\t  "+vr+"\t   ******");
print(f, " General"+"\t  "+supTot+"\t   ******");
print(f, "");

/*
print(n);
print(k);
print(N);
print(x);

print(nFac);
print(kFac);
print(NFac);
print(xFac);
*/

setBatchMode(false);

// Resultados gráficos
          
run("Merge Channels...", "c1=[rojoAndMascara] c2=[verdeAndMascara] create keep");    //Genero imagen de triple colocalización
rename("Colocalización");
updateDisplay();

selectWindow("rojoAndMascara");
close();
selectWindow("verdeAndMascara");
close();
}

//FIN











































