
/*
SETC (Significancia Estadística de la Triple Colocalización)
Julio Buonfigli
Prototipo 20

*/

macro "SSTC" {


//DOBLE O TRIPLE Y CARGA DE IMAGENES

Dialog.create("SETC");    //genero ventana de inicio
  Dialog.addMessage("Significancia Estadística de la Triple Colocalización");                                                                
  Dialog.addChoice("Número de canales:", newArray("Dos", "Tres"));    
  Dialog.show();
   	canals=Dialog.getChoice();

if(isOpen("rojoAndMascara"))
	{
	selectWindow("rojoAndMascara");
	close();
	}
if(isOpen("verdeAndMascara"))
	{
	selectWindow("verdeAndMascara");
	close();
	}
if(isOpen("azulAndMascara"))
	{
	selectWindow("azulAndMascara");
	close();
	}

requires("1.29p");              //muestra un mensaje si la versión de imagej usada no es compatible

id1=getImageID();          //identificación de IDs
tamano=0;
figura=newArray(nImages*2);
for(i=id1-800; i<id1+800; i++)
	{
	if(isOpen(i))
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}





//TRIPLE Y DOBLES

if(canals=="Tres")
{
  Dialog.create("SETC");    //genero ventana de inicio
                                                                    
  Dialog.addChoice("Rojo:", figura);         
  Dialog.addChoice("Verde:", figura);          
  Dialog.addChoice("Azul:", figura);    
  Dialog.addChoice("Máscara:", figura);  
  Dialog.addCheckbox("Significancia estadística", false); 
  Dialog.addNumber("Número de imágenes generadas:", 20); 
  Dialog.addCheckbox("Circunscribir máscara", false);
  
       Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	azul=Dialog.getChoice();
   	mascara=Dialog.getChoice();
   	generadasI=Dialog.getCheckbox();
	numGeneradas=Dialog.getNumber();
	intOR=Dialog.getCheckbox();
   	





//SENTENCIAS USADAS EN VARIOS BLOQUES

   
if(numGeneradas>50)
	exit("El número de imágenes generadas no puede ser mayor a 50");   

selectWindow(mascara);
run("Select None");

selectWindow(rojo);
run("8-bit");
selectWindow(verde);
run("8-bit");
selectWindow(azul);
run("8-bit");

w = getWidth;                                  //cargo tamaño de imagen
h = getHeight;

imageCalculator("AND create", azul, mascara);                       //opero imagenes con la máscara
rename("azulAndMascara");
imageCalculator("AND create", verde, mascara);  
rename("verdeAndMascara");
imageCalculator("AND create", rojo, mascara);   
rename("rojoAndMascara");

setBatchMode(true);

function contarUnos(ventana)                     //Declaro una función que cuenta unos
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==255)
		sumador++;
	}
return sumador;
}

function contarCeros(ventana)                     //Declaro una función que cuenta ceros
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==0)
		sumador++;
	}
return sumador;
}

unosMascara=contarUnos(mascara);                        //cuento unos y ceros en la mascara
cerosMascara=contarCeros(mascara);

if(unosMascara+cerosMascara!=w*h)
	exit("Binarizar la máscara antes de ejecutar la aplicación");


selectWindow("rojoAndMascara");
run("Make Binary");                                                                    
selectWindow("verdeAndMascara");                                                             
run("Make Binary");
selectWindow("azulAndMascara");                                           
run("Make Binary");
























// COLOCALIZACIÓN DE INTERSECCIÓN    

imageCalculator("OR create", "rojoAndMascara", "verdeAndMascara");    //Calculo la superficie cubierta total dentro de la máscara
rename("rojoOrVerde");
imageCalculator("OR create", "rojoOrVerde", "azulAndMascara");                 
rename("OR");
if(intOR==true)
{   
selectWindow("OR");                            
run("Duplicate...", "title=GOR"); 
run("Mean...", "radius=1");
//run("Gaussian Blur...", "sigma=1");
run("Threshold...");
setThreshold(1, 255);
run("Convert to Mask");
unosGOR=contarUnos("GOR");
selectWindow("Threshold");
run("Close");
}

setBatchMode(true);

showStatus("Calculando porcentage de colocalización de intersección...");

cerosRojos=contarCeros("rojoAndMascara");                     //cuento ceros en cada canal
cerosVerdes=contarCeros("verdeAndMascara");
cerosAzules=contarCeros("azulAndMascara");

cerosRandRojos=cerosRojos-cerosMascara;                       // calculo la cantidad de ceros dentro de la máscara para cada color
cerosRandVerdes=cerosVerdes-cerosMascara;
cerosRandAzules=cerosAzules-cerosMascara;

imageCalculator("AND create", "rojoAndMascara", "verdeAndMascara");     //opero para obtener doble colocalización
rename("rojoAndVerde");
imageCalculator("AND create", "azulAndMascara", "rojoAndMascara");  
rename("rojoAndAzul");
imageCalculator("AND create", "verdeAndMascara", "azulAndMascara");  
rename("verdeAndAzul");

imageCalculator("AND create", "rojoAndVerde", "azulAndMascara");     //obtengo triple colocalización
rename("TripleColocalizacion");

unosRvam=contarUnos("TripleColocalizacion");             // cuento pixeles de triple colo

unosRojos=contarUnos("rojoAndMascara");                     //cuento unos en cada canal
unosVerdes=contarUnos("verdeAndMascara");
unosAzules=contarUnos("azulAndMascara");

unosRV=contarUnos("rojoAndVerde");                       //cuento unos de doble colo
unosRA=contarUnos("rojoAndAzul");
unosVA=contarUnos("verdeAndAzul");

unosRvamOr=contarUnos("OR");                           //cuento unos en el triple OR

rv=(unosRV/unosRojos)*100;                            //calculo coeficientes de colocalización
vr=(unosRV/unosVerdes)*100;
ra=(unosRA/unosRojos)*100;
ar=(unosRA/unosAzules)*100;
va=(unosVA/unosVerdes)*100;
av=(unosVA/unosAzules)*100;
rvasc=(unosRvam/unosRvamOr)*100;
rvaenr=(unosRvam/unosRojos)*100;
rvaenv=(unosRvam/unosVerdes)*100;
rvaena=(unosRvam/unosAzules)*100;

selectWindow("TripleColocalizacion");         //cierro imágenes para que no interfieran con futuras corridas
close();



selectWindow("rojoOrVerde");
close();
selectWindow("OR");
close();







//  SIGNIFICANCIA ESTADÍSTICA INTERSECCIÓN

if(generadasI==true)
{

showStatus("Calculando significancia estadística de colocalización de intersección...");

rrv=newArray(numGeneradas);                           //Defino arreglos para cada indice de colocalización
rvr=newArray(numGeneradas);
rra=newArray(numGeneradas);
rar=newArray(numGeneradas);
rva=newArray(numGeneradas);
rav=newArray(numGeneradas);
rrvasc=newArray(numGeneradas);
rrvaenr=newArray(numGeneradas);
rrvaenv=newArray(numGeneradas);
rrvaena=newArray(numGeneradas);

pcrrv=0;		                                       //Inicializo contadores positivos
pcrvr=0;	
pcrra=0;
pcrar=0;
pcrva=0;
pcrav=0;
pcrrvasc=0;
pcrrvaenr=0;
pcrrvaenv=0;
pcrrvaena=0;

ncrrv=0;		                                       //Inicializo contadores negativos
ncrvr=0;
ncrra=0;
ncrar=0;
ncrva=0;
ncrav=0;
ncrrvasc=0;
ncrrvaenr=0;
ncrrvaenv=0;
ncrrvaena=0;

rvvr=rv+vr;                                            //variables útiles en condicionales de triple colocalización            
arra=ra+ar;
vaav=va+av;



for(s=0; s<numGeneradas; s++)                        //rulo para generar tantas imágenes aleatorias para cada fluoróforo como se cargue en el diálogo de entrada
	{
	//beep();

	random("seed", round(random*w*h*10));
if(intOR==true)
{
	selectWindow("GOR");                            //genero una imagen aleatoria para el canal rojo
	run("Duplicate...", "title=RandRojo");
	z=0;
            f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=(unosGOR-unosRojos)/unosGOR)
			setPixel(x, y, 0);
			}
		}
		
	
	selectWindow("GOR");                            //genero una imagen aleatoria para el canal verde
	run("Duplicate...", "title=RandVerde");
	z=0;
   	f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=(unosGOR-unosVerdes)/unosGOR)
				setPixel(x, y, 0);
			
			}
		}
	

	selectWindow("GOR");                            //genero una imagen aleatoria para el canal azul
	run("Duplicate...", "title=RandAzul");
	z=0;
   	f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=(unosGOR-unosAzules)/unosGOR)
				setPixel(x, y, 0);
			}
		}
}
else
{
selectWindow(mascara);                            //genero una imagen aleatoria para el canal rojo
	run("Duplicate...", "title=RandRojo");
	z=0;
            f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=cerosRandRojos/unosMascara)
			setPixel(x, y, 0);
			}
		}
		
	
	selectWindow(mascara);                            //genero una imagen aleatoria para el canal verde
	run("Duplicate...", "title=RandVerde");
	z=0;
   	f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=cerosRandVerdes/unosMascara)
				setPixel(x, y, 0);
			
			}
		}
	

	selectWindow(mascara);                            //genero una imagen aleatoria para el canal azul
	run("Duplicate...", "title=RandAzul");
	z=0;
   	f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=cerosRandAzules/unosMascara)
				setPixel(x, y, 0);
			}
		}
}	
	
	imageCalculator("AND create", "RandRojo", "RandVerde");     //opero para obtener doble colocalización
	rename("RandRojoAndRandVerde");
	imageCalculator("AND create", "RandRojo", "RandAzul");  
	rename("RandRojoAndRandAzul");
	imageCalculator("AND create", "RandVerde", "RandAzul");  
	rename("RandVerdeAndRandAzul");

	if(rvvr==vaav && rvvr==arra)
		{													
		imageCalculator("AND create", "RandAzul", "rojoAndVerde");     // chequeo cual es color que menos colocaliza con el resto y obtengo triple colocalización
		rename("RandTripleColocalizacion");
		}
		else
		{
		if(rvvr>=vaav && rvvr>=arra)
			{													
			imageCalculator("AND create", "RandAzul", "rojoAndVerde");     
			rename("RandTripleColocalizacion");
			}
		if(vaav>=rvvr && vaav>=arra)
			{													
			imageCalculator("AND create", "RandRojo", "verdeAndAzul");   
			rename("RandTripleColocalizacion");
			}
		if(arra>=vaav &&  arra>=rvvr)
			{													
			imageCalculator("AND create", "RandVerde", "rojoAndAzul");  
			rename("RandTripleColocalizacion");
			}
		}

if(isOpen("RandTripleColocalizacion"))	
	{}
	else
	exit("Error de binarización");
 
	RandunosRvam=contarUnos("RandTripleColocalizacion");         //Cuento la cantidad de pixeles de triple colo
	
	RandunosRV=contarUnos("RandRojoAndRandVerde");    //cueno pixeles de doble colo 
	RandunosRA=contarUnos("RandRojoAndRandAzul"); 
	RandunosVA=contarUnos("RandVerdeAndRandAzul"); 

	
// la superficie cubierta total aleatoria es la misma que la del ensayo
// igual que el total de unos para cada color son los del ensayo


	rrv[s]=(RandunosRV/unosRojos)*100;                            //calculo coeficientes de colocalización
	rvr[s]=(RandunosRV/unosVerdes)*100;
	rra[s]=(RandunosRA/unosRojos)*100;
	rar[s]=(RandunosRA/unosAzules)*100;
	rva[s]=(RandunosVA/unosVerdes)*100;
	rav[s]=(RandunosVA/unosAzules)*100;	
	rrvasc[s]=(RandunosRvam/unosRvamOr)*100;
	rrvaenr[s]=(RandunosRvam/unosRojos)*100;
	rrvaenv[s]=(RandunosRvam/unosVerdes)*100;
	rrvaena[s]=(RandunosRvam/unosAzules)*100;


	if(rrv[s]<=rv)                           //Para cada coeficiente de colocalización cuento cuantas veces fue mayor el generado al azar
		pcrrv++;
		else
		ncrrv++;	
	if(rvr[s]<=vr)
		pcrvr++;
		else
		ncrvr++;
	if(rra[s]<=ra)
		pcrra++;
		else
		ncrra++;
	if(rar[s]<=ar)
		pcrar++;
		else
		ncrar++;	
	if(rva[s]<=va)
		pcrva++;
		else
		ncrva++;
	if(rav[s]<=av)
		pcrav++;
		else
		ncrav++;
	if(rrvasc[s]<=rvasc)
		pcrrvasc++;
		else
		ncrrvasc++;	
	if(rrvaenr[s]<=rvaenr)
		pcrrvaenr++;
		else
		ncrrvaenr++;	
	if(rrvaenv[s]<=rvaenv)
		pcrrvaenv++;
		else
		ncrrvaenv++;
	if(rrvaena[s]<=rvaena)
		pcrrvaena++;
		else
		ncrrvaena++;	
	

selectWindow("RandRojo");                           //cierro imágenes para que no interfieran en el próximo ciclo del lazo	
close();
selectWindow("RandVerde");
close();
selectWindow("RandAzul");
close();
selectWindow("RandRojoAndRandVerde");
close();	
selectWindow("RandRojoAndRandAzul");
close();
selectWindow("RandVerdeAndRandAzul");
close();
selectWindow("RandTripleColocalizacion");
close();
	
}


sumRrv=0;                          //inicializo variables de suma para promedios
sumRvr=0;
sumRra=0;
sumRvr=0;
sumRar=0;
sumRva=0;
sumRav=0;
sumRrvasc=0;
sumRrvaenr=0;
sumRrvaenv=0;
sumRrvaena=0;


for(i=0; i<numGeneradas; i++)         //sumo
	{	
	sumRrv=sumRrv+rrv[i];
	sumRvr=sumRvr+rvr[i];
	sumRra=sumRra+rra[i];
	sumRar=sumRar+rar[i];
	sumRva=sumRva+rva[i];
	sumRav=sumRav+rav[i];
	sumRrvasc=sumRrvasc+rrvasc[i];
	sumRrvaenr=sumRrvaenr+rrvaenr[i];
	sumRrvaenv=sumRrvaenv+rrvaenv[i];
	sumRrvaena=sumRrvaena+rrvaena[i];
	}
	
promRrv=sumRrv/numGeneradas;                                    //promedio
promRvr=sumRvr/numGeneradas; 
promRra=sumRra/numGeneradas; 
promRar=sumRar/numGeneradas; 
promRva=sumRva/numGeneradas; 
promRav=sumRav/numGeneradas;
promRrvasc=sumRrvasc/numGeneradas; 
promRrvaenr=sumRrvaenr/numGeneradas; 
promRrvaenv=sumRrvaenv/numGeneradas; 
promRrvaena=sumRrvaena/numGeneradas; 

ratioPcrrvasc=pcrrvasc/numGeneradas; 
ratioIrrvaenr=pcrrvaenr/numGeneradas;                                            //Valores de la tabla de resultados, colo significativa (SC)....
ratioIrrvaenv=pcrrvaenv/numGeneradas;
ratioIrrvaena=pcrrvaena/numGeneradas;                            
ratioIrv=pcrrv/numGeneradas;
ratioIvr=pcrvr/numGeneradas;
ratioIra=pcrra/numGeneradas;                            
ratioIar=pcrar/numGeneradas;
ratioIva=pcrva/numGeneradas;
ratioIav=pcrav/numGeneradas;                            


if(pcrrvasc==0)
	SSIst="SE";
	else
	if(pcrrvasc==numGeneradas)
		SSIst="SC";
		else
		SSIst="NS";

if(rrvaenr==0)
	SSItenr="SE";
	else
	if(rrvaenr==numGeneradas)
		SSItenr="SC";
		else
		SSItenr="NS";

if(rrvaenv==0)
	SSItenv="SE";
	else
	if(rrvaenv==numGeneradas)
		SSItenv="SC";
		else
		SSItenv="NS";

if(rrvaena==0)
	SSItena="SE";
	else
	if(rrvaena==numGeneradas)
		SSItena="SC";
		else
		SSItena="NS";

if(pcrrv==0)
	SSIrv="SE";
	else
	if(pcrrv==numGeneradas)
		SSIrv="SC";
		else
		SSIrv="NS";

if(pcrvr==0)
	SSIvr="SE";
	else
	if(pcrvr==numGeneradas)
		SSIvr="SC";
		else
		SSIvr="NS";

if(pcrra==0)
	SSIra="SE";
	else
	if(pcrvr==numGeneradas)
		SSIra="SC";
		else
		SSIra="NS";

if(pcrar==0)
	SSIar="SE";
	else
	if(pcrar==numGeneradas)
		SSIar="SC";
		else
		SSIar="NS";

if(pcrva==0)
	SSIva="SE";
	else
	if(pcrva==numGeneradas)
		SSIva="SC";
		else
		SSIva="NS";

if(pcrav==0)
	SSIav="SE";
	else
	if(pcrav==numGeneradas)
		SSIav="SC";
		else
		SSIav="NS";



}

showStatus("");








//RESULTADOS


selectWindow("rojoAndVerde");               //cierro imágenes para que no interfieran con futuras corridas de la aplicación
close();
selectWindow("rojoAndAzul");
close();
selectWindow("verdeAndAzul");
close();


if(generadasI==false)
{
promRrv="  ******";      
promRvr="  ******"; 
promRra="  ******"; 
promRar="  ******";
promRva="  ******";
promRav="  ******"; 
promRrvasc="  ******"; 
promRrvaenr="  ******"; 
promRrvaenv="  ******";
promRrvaena="  ******";
ratioPcrrvasc=" ******"; 
ratioIrrvaenr=" ******";                                          
ratioIrrvaenv=" ******";
ratioIrrvaena=" ******";                          
ratioIrv=" ******";
ratioIvr=" ******";
ratioIra=" ******";                          
ratioIar=" ******";
ratioIva=" ******";
ratioIav=" ******";
SSIst=" ******";
SSItenr=" ******";
SItenv=" ******";
SSItena=" ******";
SSIrv=" ******";
SSIvr=" ******";
SSIra=" ******";
SSIar=" ******";
SSIva=" ******";
SSIav=" ******";
/*
pcrrv="  ******";                                       
pcrvr="  ******";	 
pcrra="  ******"; 
pcrar="  ******"; 
pcrva="  ******";
pcrav="  ******"; 
pcrrvasc="  ******";  
pcrrvaenr="  ******"; 
pcrrvaenv="  ******";
pcrrvaena="  ******"; 
ncrrv="  ******";                                       
ncrvr="  ******"; 
ncrra="  ******";
ncrar="  ******"; 
ncrva="  ******";
ncrav="  ******"; 
ncrrvasc="  ******";
ncrrvaenr="  ******";
ncrrvaenv="  ******";
ncrrvaena="  ******";
*/
}

titulo1 = "Resultados";                                            //genero cuadro que muestra resultados
titulo2 = "["+titulo1+"]";
  f = titulo2;
 if (isOpen(titulo1))
    print(f, "\\Clear");
 else
run("Table...", "name="+titulo1+" width=250 height=600");
print(f, "\\Headings:para\t% intersección\t% aleatorizaciones\t  SE \trelación");
print(f, "Doble colocalización");
print(f, " Rojo en verde"+"\t  "+rv+"\t  "+promRrv+"\t  "+SSIrv+"\t  "+ratioIrv);
print(f, " Verde en rojo"+"\t  "+vr+"\t  "+promRvr+"\t  "+SSIvr+"\t  "+ratioIvr);
print(f, " Rojo en azul"+"\t  "+ra+"\t  "+promRra+"\t  "+SSIra+"\t  "+ratioIra);
print(f, " Azul en rojo"+"\t  "+ar+"\t  "+promRar+"\t  "+SSIar+"\t  "+ratioIar);
print(f, " Verde en azul"+"\t  "+va+"\t  "+promRva+"\t  "+SSIva+"\t  "+ratioIva);
print(f, " Azul en verde"+"\t  "+av+"\t  "+promRav+"\t  "+SSIav+"\t  "+ratioIav);
print(f, "Triple colocalización");
print(f, " General"+"\t  "+rvasc+"\t  "+promRrvasc+"\t  "+SSIst+"\t  "+ratioPcrrvasc);
print(f, " Según rojo"+"\t  "+rvaenr+"\t  "+promRrvaenr+"\t  "+SSItenr+"\t  "+ratioIrrvaenr);
print(f, " Según verde"+"\t  "+rvaenv+"\t  "+promRrvaenv+"\t  "+SSItenv+"\t  "+ratioIrrvaenv);
print(f, " Según azul"+"\t  "+rvaena+"\t  "+promRrvaena+"\t  "+SSItena+"\t  "+ratioIrrvaena);
print(f, "");
if(generadasI==true)
print(f, "valor P: "+1/numGeneradas);

/*
print("REFERENCIAS:\n");
print("% intersección: porcentage de colocalización según coeficientes de intersección.\n");
print("% aleatorizaciones: promedio de resultados de colocalización obtenidos de las imágenes generadas (o aleatorizaciones) para coeficientes de intersección.\n");
print("SE: significancia estadística. El primero de la tabla (de izquierda a derecha), para coeficientes de intersección, y el segundo para Manders.\n");
print("SC: colocalización significativa; SE: exclusión significativa; NS: resultado no significativo.\n");
print("relación: entre la cantidad de aleatorizaciones que arrojaron resultados de colocalización menores que las imágenes generadas y la cantidad total de aleatorizaciones. \n");
print("Tiende a 1 cuando los resultados de aleatorizaciones se acercan a colocalización significativa y a cero cuando los resultados tienden a exclusión significativa.\n");
print(" El primero de la table (de izquierda a derecha), para coeficientes de intersección y el segundo para Manders. \n");
print("Pearson: coeficiente de Pearson. Solo para colocalización doble.\n");
print("Manders: coeficiente de Manders.\n");
print("aleatorizaciones: promedio de resultados de colocalización obtenidos de las imágenes generadas para coeficientes de Manders.\n");
print("General: coeficiente de intersección según superficie cubierta por los tres canales.\n");
print("Valor P: define el nivel de significación. Cuanto menor sea más significativos serán los resultados. Es el cociente: 1/(número de imágenes generadas).\n");
print("\n");
*/



setBatchMode(false);

// Resultados gráficos
          


run("Merge Channels...", "c1=[rojoAndMascara] c2=[verdeAndMascara] c3=[azulAndMascara] create keep");    //Genero imagen de triple colocalización
rename("Colocalización");
updateDisplay();


selectWindow("rojoAndMascara");
close();
selectWindow("verdeAndMascara");
close();
selectWindow("azulAndMascara");
close();
if(intOR==true)
{
selectWindow("GOR");
close();
}


}

//fin TRIPLE


















































if(canals=="Dos")
{

  Dialog.create("SETC");    //genero ventana de inicio
                                                                    
  Dialog.addChoice("Rojo:", figura);         
  Dialog.addChoice("Verde:", figura);          
   Dialog.addChoice("Máscara:", figura);  
  Dialog.addCheckbox("Significancia estadística", false); 
  Dialog.addNumber("Número de imágenes generadas:", 50); 
  Dialog.addCheckbox("Circunscribir máscara", false);
  
       Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	mascara=Dialog.getChoice();
   	generadasI=Dialog.getCheckbox();
	numGeneradas=Dialog.getNumber();
        intOR=Dialog.getCheckbox();
   	
	






//SENTENCIAS USADAS EN VARIOS BLOQUES

if(numGeneradas>50)
	exit("El número de imágenes generadas no puede ser mayor a 50");   

selectWindow(mascara);
run("Select None");

selectWindow(rojo);
run("8-bit");
selectWindow(verde);
run("8-bit");


w = getWidth;                                  //cargo tamaño de imagen
h = getHeight;


imageCalculator("AND create", verde, mascara);     //opero imágenes con la máscara
rename("verdeAndMascara");
imageCalculator("AND create", rojo, mascara);   
rename("rojoAndMascara");

setBatchMode(true);

function contarUnos(ventana)                     //Declaro una función que cuenta unos
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==255)
		sumador++;
	}
return sumador;
}

function contarCeros(ventana)                     //Declaro una función que cuenta ceros
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==0)
		sumador++;
	}
return sumador;
}

unosMascara=contarUnos(mascara);                        //cuento unos y ceros en la mascara
cerosMascara=contarCeros(mascara);

if(unosMascara+cerosMascara!=w*h)
	exit("Binarizar la máscara antes de ejecutar la aplicación");


selectWindow("rojoAndMascara");
run("Make Binary");
selectWindow("verdeAndMascara");                                                             
run("Make Binary");












// COLOCALIZACIÓN DE INTERSECCIÓN        

if(intOR==true)
{
imageCalculator("OR create", "rojoAndMascara", "verdeAndMascara");          
rename("GOR"); 
run("Mean...", "radius=1");  
//run("Gaussian Blur...", "sigma=1");
run("Threshold...");
setThreshold(1, 255);
run("Convert to Mask");
unosGOR=contarUnos("GOR");
selectWindow("Threshold");
run("Close");
}

setBatchMode(true);

showStatus("Calculando porcentage de colocalización de intersección...");

cerosRojos=contarCeros("rojoAndMascara");                     //cuento ceros en cada canal
cerosVerdes=contarCeros("verdeAndMascara");

cerosRandRojos=cerosRojos-cerosMascara;                       // calculo la cantidad de ceros dentro de la máscara para cada color
cerosRandVerdes=cerosVerdes-cerosMascara;

imageCalculator("AND create", "rojoAndMascara", "verdeAndMascara");     //opero para obtener doble colocalización
rename("rojoAndVerde");

unosRojos=contarUnos("rojoAndMascara");                     //cuento unos en cada canal
unosVerdes=contarUnos("verdeAndMascara");

unosRV=contarUnos("rojoAndVerde");                       //cuento unos de doble colo

rv=(unosRV/unosRojos)*100;                            //calculo coeficientes de colocalización
vr=(unosRV/unosVerdes)*100;
supTot=(unosRV/(unosRojos+unosVerdes-unosRV))*100;
















//  SIGNIFICANCIA ESTADÍSTICA INTERSECCIÓN

if(generadasI==true)
{

showStatus("Calculando significancia estadística de colocalización de intersección...");

rrv=newArray(numGeneradas);                           //Defino arreglos para cada indice de colocalización
rvr=newArray(numGeneradas);
rSupTot=newArray(numGeneradas);   

pcrrv=0;		                                       //Inicializo contadores positivos
pcrvr=0;	
pSupTot=0;

ncrrv=0;		                                       //Inicializo contadores negativos
ncrvr=0;
nSupTot=0;



for(s=0; s<numGeneradas; s++)                        //rulo para generar tantas imágenes aleatorias para cada fluoróforo como se cargue en el diálogo de entrada
	{
	//beep();

	random("seed", round(random*w*h*10));

if(intOR==true)
{
selectWindow("GOR");                            //genero una imagen aleatoria para el canal rojo
	run("Duplicate...", "title=RandRojo");
	z=0;
            f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=(unosGOR-unosRojos)/unosGOR)
			setPixel(x, y, 0);
			}
		}
}
else
{
	selectWindow(mascara);                            //genero una imagen aleatoria para el canal rojo
	run("Duplicate...", "title=RandRojo");
	z=0;
            f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			f=random;
			if(f<=cerosRandRojos/unosMascara)
			setPixel(x, y, 0);
			}
		}
		
}	
	
	
	imageCalculator("AND create", "RandRojo", "verdeAndMascara");     //opero para obtener doble colocalización
	rename("RandRojoAndRandVerde");
	
	RandunosRV=contarUnos("RandRojoAndRandVerde");    //cueno pixeles de doble colo 
	
	
// la superficie cubierta total aleatoria es la misma que la del ensayo
// igual que el total de unos para cada color son los del ensayo


	rrv[s]=(RandunosRV/unosRojos)*100;                            //calculo coeficientes de colocalización
	rvr[s]=(RandunosRV/unosVerdes)*100;
	rSupTot[s]=(RandunosRV/(unosRojos+unosVerdes-RandunosRV))*100;

	if(rrv[s]<=rv)                           //Para cada coeficiente de colocalización cuento cuantas veces fue mayor el generado al azar
		pcrrv++;
		else
		ncrrv++;	
	if(rvr[s]<=vr)
		pcrvr++;
		else
		ncrvr++;
	if(rSupTot[s]<=supTot)
		pSupTot++;
		else
		nSupTot++;


	

selectWindow("RandRojo");                           //cierro imágenes para que no interfieran en el próximo ciclo del lazo	
close();
selectWindow("RandRojoAndRandVerde");
close();	

	
}

ratioIr=pcrrv/numGeneradas;                                  //Valores de la tabla de resultados, colo significativa (SC)....                      
ratioIv=pcrvr/numGeneradas;
ratioIst=pSupTot/numGeneradas;

if(pcrrv==0)
	SSIr="SE";
	else
	if(pcrrv==numGeneradas)
		SSIr="SC";
		else
		SSIr="NS";

if(pcrvr==0)
	SSIv="SE";
	else
	if(pcrvr==numGeneradas)
		SSIv="SC";
		else
		SSIv="NS";

if(pSupTot==0)
	SSst="SE";
	else
	if(pSupTot==numGeneradas)
		SSst="SC";
		else
		SSst="NS";


sumRrv=0;                          //inicializo variables de suma para promedios
sumRvr=0;
sumSupTot=0;

for(i=0; i<numGeneradas; i++)         //sumo
	{	
	sumRrv=sumRrv+rrv[i];
	sumRvr=sumRvr+rvr[i];
	sumSupTot=sumSupTot+rSupTot[i];
	}
	
promRrv=sumRrv/numGeneradas;                                    //promedio
promRvr=sumRvr/numGeneradas; 
promSupTot=sumSupTot/numGeneradas;   

}

showStatus("");







//RESULTADOS



selectWindow("rojoAndVerde");               //cierro imágenes para que no interfieran con futuras corridas de la aplicación
close();


if(generadasI==false)
{
promRrv="  ******";      
promRvr="  ******"; 
promSupTot="  ******"; 
//pcrrv="  ******";                                     
//pcrvr="  ******";	 
//pSupTot="  ******"; 
//ncrrv="  ******";                                       
//ncrvr="  ******"; 
//nSupTot="  ******";
SSIr="  ******";
SSIv="  ******";
SSst="  ******";
ratioIst="  ******";
ratioIr="  ******";
ratioIv="  ******";
}

titulo1 = "Resultados";                                            //genero cuadro que muestra resultados
titulo2 = "["+titulo1+"]";
  f = titulo2;
 if (isOpen(titulo1))
    print(f, "\\Clear");
 else
run("Table...", "name="+titulo1+" width=250 height=600");
print(f, "\\Headings:para\t% intersección\t% aleatorizaciones\t  SE \trelación");
print(f, " Rojo en verde"+"\t  "+rv+"\t  "+promRrv+"\t  "+SSIr+"\t  "+ratioIr);
print(f, " Verde en rojo"+"\t  "+vr+"\t  "+promRvr+"\t  "+SSIv+"\t  "+ratioIv);
print(f, " General"+"\t  "+supTot+"\t  "+promSupTot+"\t  "+SSst+"\t  "+ratioIst);
print(f, "");
if(generadasI==true)
print(f, "Valor P= "+1/numGeneradas);


setBatchMode(false);

// Resultados gráficos
          


run("Merge Channels...", "c1=[rojoAndMascara] c2=[verdeAndMascara] create keep");    //Genero imagen de triple colocalización
rename("Colocalización");
updateDisplay();

selectWindow("rojoAndMascara");
close();
selectWindow("verdeAndMascara");
close();
if(intOR==true)
{
selectWindow("GOR");
close();
}

}

//fin DOBLE

}
//FIN











































