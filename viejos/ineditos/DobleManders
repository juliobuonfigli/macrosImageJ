macro "Doble Colocalizacion [r]" 
{


id1=getImageID();                        //identificación de IDs
tamano=0;
figura=newArray(nImages);
for(i=id1-10000; i<id1+10000; i++)
	{
	if(isOpen(i) && tamano<nImages)
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}

  Dialog.create("SETC");    //genero ventana de inicio
                                                                    
  Dialog.addChoice("Rojo:", figura);         
  Dialog.addChoice("Verde:", figura);          
  Dialog.addChoice("Máscara:", figura);  
  
    
       Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	mascara=Dialog.getChoice();
 
numGeneradas=10; 	

selectWindow(mascara);
run("Select None");

w = getWidth;                                  //cargo tamaño de imagen
h = getHeight;

imageCalculator("AND create", verde, mascara);     //opero imágenes con la máscara
rename("verdeAndMascaraM");
imageCalculator("AND create", rojo, mascara);   
rename("rojoAndMascaraM");

function sumarPixInt(ventana)                     //Declaro una función que suma intensidades de todos los pixeles
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   suma=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	suma=suma+a[i];
	}
return suma;
}

sumRojo=sumarPixInt("rojoAndMascaraM");           // para umbral         
sumVerde=sumarPixInt("verdeAndMascaraM");

function contarUnos(ventana)                     //Declaro una función que cuenta unos
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==255)
		sumador++;
	}
return sumador;
}


selectWindow(mascara);	                           //vectorizo la máscara
  masc = newArray(w*h);
  i = 0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		{
		masc[i] = getPixel(x,y);
		i++;
		}
	}

unosMascara=contarUnos(mascara);                        //cuento unos en la mascara


pr=sumRojo/unosMascara;              // para umbral                    
pv=sumVerde/unosMascara;
 
// UMBRAL
{

 Dialog.create("UMBRAL");                                                                                                                                                                                       //cuadro de diálogo de selección de tipo de binarización                                         
 Dialog.addChoice("Seleccione el criterio de elección de umbral", newArray("por defecto", "según intensidad promedio", "fijar por canal"));
        Dialog.show();
	bin=Dialog.getChoice();

if(bin=="por defecto")
{
MUR=1;
MUV=1;
}
  	
if(bin=="según intensidad promedio")
{
 Dialog.create("Factor de Multiplicación");                                                                                                                                                                                        
 Dialog.addChoice("Seleccione el factor de multiplicación", newArray(0.125, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 3.25, 3.5, 3.75, 4)); 
 Dialog.addMessage("El umbral será la intensidad promedio de cada canal por el factor de multiplicación.");           
       Dialog.show();
	factorP=Dialog.getChoice();
            
MUR=round(pr*factorP);
MUV=round(pv*factorP);

}

if(bin=="fijar por canal")          
                                                                //binarización manual
{  
Dialog.create("Umbral");    //genero ventana de inicio                                                       
  
  Dialog.addNumber("Rojo:", 1); 
  Dialog.addNumber("Verde:", 1); 
       
Dialog.show();
	MUR=Dialog.getNumber();
	MUV=Dialog.getNumber();
	
}

if(bin=="fijar por canal" || bin=="según intensidad promedio")
{
selectWindow("rojoAndMascaraM");            //binariza canal rojo segun intensidad promedio   
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
        	  	{	
		a = getPixel(x,y);
		if(a<MUR)
			setPixel(x, y, 0);
		}

	}


selectWindow("verdeAndMascaraM");      //binariza canal verde según intensidad promedio
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
       		{	
		a = getPixel(x,y);
		if(a<MUV)
			setPixel(x, y, 0);
		}

	}

}
}

// CALCULO COEFICIENTE DE MANDERS
{

sumRojo=0;                 //sumo intensidades en cada imagen
sumVerde=0;

numMRv=0;
numMVr=0;
 
selectWindow("rojoAndMascaraM");	      //vectorizo cada canal y sumo intensidad total
  r = newArray(unosMascara);
  i = 0;
  mas=0;
for (y=0; y<h; y++)
	{
	showStatus("Calculando coeficientes de Manders...");
	for (x=0; x<w; x++)
		{
		if(masc[mas]==255)
			{
			r[i] = getPixel(x,y);
			sumRojo=sumRojo+r[i];
			i++;
			}
		mas++;
		}
	}
	

selectWindow("verdeAndMascaraM");	
  v = newArray(unosMascara);
  i = 0;
  mas=0;
for (y=0; y<h; y++)
	{
	showStatus("Calculando coeficientes de Manders...");
	for (x=0; x<w; x++)
		{
		if(masc[mas]==255)
			{
			v[i] = getPixel(x,y);
			sumVerde=sumVerde+v[i];
			i++;
			}
		mas++;
		}
	}


for(i=0; i<unosMascara; i++)                                     //calculo todas las series                
	{
	showStatus("Calculando coeficientes de Manders...");
	if(r[i]*v[i] != 0)
		{
		numMRv=numMRv+r[i];
		numMVr=numMVr+v[i];
		}	
	
	}

MRv=numMRv/sumRojo;
MVr=numMVr/sumVerde;

}


// SIGNIFICANCIA ESTADÍSTICA DE MANDERS
{


rMRv=newArray(numGeneradas);
rMVr=newArray(numGeneradas);

rnumMRv=newArray(numGeneradas);  
rnumMVr=newArray(numGeneradas);  

random("seed", round(random*unosMascara*10));


for(s=0; s<numGeneradas; s++)                                        //rulo para generar tantas imágenes aleatorias para cada fluoróforo como se cargue en el diálogo de entrada
	{
 
	showStatus("Significancia estadística de coeficiente de Manders: "+s);                                                                                   


	u=newArray(unosMascara);                                                                //desordeno aleatoriamente el vector rojo
	for(i=0; i<unosMascara; i++)
		u[i]=true;

	rd=newArray(unosMascara);
	i=0;	
	while(i<unosMascara)
		{
		e=random*unosMascara;
		if(u[e]==true)
			{
			rd[i]=r[e];
			u[e]=false;
			i++;
			}
		}

	u=newArray(unosMascara);                                                                //desordeno aleatoriamente el vector verde
	for(i=0; i<unosMascara; i++)
		u[i]=true;

	vd=newArray(unosMascara);
	i=0;	
	while(i<unosMascara)
		{
		e=random*unosMascara;
		if(u[e]==true)
			{
			vd[i]=v[e];
			u[e]=false;
			i++;
			}
		}
                                                                      
	rnumMRv[s]=0;
	rnumMVr[s]=0;
	for(i=0; i<unosMascara; i++)                                                  //calculo doble colocalizacion de imagenes generadas                
		{
		if(rd[i]*v[i] != 0)
			{
			rnumMRv[s]=rnumMRv[s]+rd[i];
			rnumMVr[s]=rnumMVr[s]+v[i];
			}	
		}

	rMRv[s]=rnumMRv[s]/sumRojo;
	rMVr[s]=rnumMVr[s]/sumVerde;


	}

showStatus("Significancia estadística de coeficiente de Manders: "+s);
wait(1000);

sumMRv=0;
sumMVr=0;

for(i=0; i<numGeneradas; i++)         //sumo
	{	
	sumMRv=sumMRv+rMRv[i];
	sumMVr=sumMVr+rMVr[i];
	}

promMRv=sumMRv/numGeneradas; 
promMVr=sumMVr/numGeneradas; 


print("Rojo en verde: "+MRv+ "  y las aleatorizaciones:  " + promMRv+ "\n");
print("Verde en rojo: "+MVr+ "  y las aleatorizaciones:  " + promMVr+ "\n");

}
}
}

//FIN


