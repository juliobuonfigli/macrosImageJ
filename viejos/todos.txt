/*BINARIZACIÓN AUTOMÁTICA*/

// CARGA DE DATOS

id1=getImageID();          //identificación de IDs
tamano=0;
figura=newArray(12);
for(i=id1-1000; i<id1+1000; i++)
	{
	if(isOpen(i))
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}

  Dialog.create("SETC");    //genero ventana de inicio
                                                                    
  Dialog.addChoice("Rojo:", figura);         
  Dialog.addChoice("Verde:", figura);          
  Dialog.addChoice("Azul:", figura);    
  Dialog.addChoice("Máscara:", figura);    
  Dialog.addCheckbox("Binarización según intensidad promedio", true);
  Dialog.addCheckbox("Binarización porcentual", true);
  Dialog.addNumber("Rojo: ", 5); 
  Dialog.addNumber("Verde: ", 5); 
  Dialog.addNumber("Azul: ", 5); 
  
        Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	azul=Dialog.getChoice();
   	mascara=Dialog.getChoice();
   	bin1=Dialog.getCheckbox();
	bin2=Dialog.getCheckbox();
   	porR=Dialog.getNumber();
	porV=Dialog.getNumber();
	porA=Dialog.getNumber();

w = getWidth;                                  //cargo tamaño de imagen
h = getHeight;


function sumarPixInt(ventana)                     //Declaro una función que suma intensidades de todos los pixeles
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   suma=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	suma=suma+a[i];
	}
return suma;
}

imageCalculator("AND create", rojo, mascara);    //opero imagenes con la máscara
rename("rojoAndMascara");
imageCalculator("AND create", verde, mascara);  
rename("verdeAndMascara");
imageCalculator("AND create", azul, mascara);  
rename("azulAndMascara");

sumRojo=sumarPixInt("rojoAndMascara");                     //sumo intensidades en cada imagen
sumVerde=sumarPixInt("verdeAndMascara");
sumAzul=sumarPixInt("azulAndMascara");

selectWindow(mascara);       //Cuento la cantidad pixeles de la seleccion (o máscara)
   a = newArray(w*h);
   i = 0;
   unosMascara = 0;
     
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==255)
		unosMascara++;
	}


if(bin2==true)
{

coeR=porR/100;
coeV=porV/100;
coeA=porA/100;


t=255;
selectWindow("rojoAndMascara");    
do
{
unos = 0;    
t--;
for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a!=255)
			{
			if(a==t)
				setPixel(x, y, 255);
			}
			else
			unos++;
		}
	}
}
while(unos<coeR*unosMascara);

for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a!=255)
			setPixel(x, y, 0);
		}
	}
updateDisplay();


t=255;
selectWindow("verdeAndMascara");    
do
{
unos = 0;    
t--;
for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a!=255)
			{
			if(a==t)
				setPixel(x, y, 255);
				
			}
			else
			unos++;
		}
	}
}
while(unos<coeV*unosMascara);

for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a!=255)
			setPixel(x, y, 0);
		}
	}
updateDisplay();



t=255;
selectWindow("azulAndMascara");    
do
{
unos = 0;    
t--;
for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a!=255)
			{
			if(a==t)
				setPixel(x, y, 255);
			}
			else
			unos++;
		}
	}
}
while(unos<coeA*unosMascara);

for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{
		a = getPixel(x,y);
		if(a!=255)
			setPixel(x, y, 0);
		}
	}
updateDisplay();

}

if(bin1==true)
{

pr=sumRojo/unosMascara;                                    //calculo promedios de intensidad para cada imagen 
pv=sumVerde/unosMascara;
pa=sumAzul/unosMascara;                   // o deberia ser sobre (w*h)


selectWindow("rojoAndMascara");    
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{	
		a = getPixel(x,y);
		if(a>pr*3)
			setPixel(x, y, 255);
			else
			setPixel(x, y, 0);
		}

	}

updateDisplay();


selectWindow("verdeAndMascara");    
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{	
		a = getPixel(x,y);
		if(a>pv*3)
			setPixel(x, y, 255);
			else
			setPixel(x, y, 0);
		}

	}

updateDisplay();


selectWindow("azulAndMascara");    
i = 0;
 for (y=0; y<h; y++)
	{
      	for (x=0; x<w; x++)
          		{	
		a = getPixel(x,y);
		if(a>pa*3)
			setPixel(x, y, 255);
			else
			setPixel(x, y, 0);
		}

	}

updateDisplay();

}

/*
print(unosMascara);
print(pr);
print(NUR);
print(pr2);
print(NUR2);
*/



// CARGA DE DATOS

id1=getImageID();          //identificación de IDs
tamano=0;
figura=newArray(12);
for(i=id1-1000; i<id1+1000; i++)
	{
	if(isOpen(i))
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}

  Dialog.create("SETC");    //genero ventana de inicio
                                                                    
  Dialog.addChoice("Rojo:", figura);         
  Dialog.addChoice("Verde:", figura);          
  Dialog.addChoice("Azul:", figura);    
  Dialog.addChoice("Máscara:", figura);    
  
      Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	azul=Dialog.getChoice();
   	mascara=Dialog.getChoice();
   	

w = getWidth;                                  //cargo tamaño de imagen
h = getHeight;


function sumarPixInt(ventana)                     //Declaro una función que suma intensidades de todos los pixeles
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   suma=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	suma=suma+a[i];
	}
return suma;
}

setBatchMode(true);                   //por si quiero ver como se procesan las imágenes

imageCalculator("AND create", rojo, mascara);    //opero imagenes con la máscara
rename("rojoAndMascara");
imageCalculator("AND create", verde, mascara);  
rename("verdeAndMascara");
imageCalculator("AND create", azul, mascara);  
rename("azulAndMascara");

sumRojo=sumarPixInt("rojoAndMascara");                     //sumo intensidades en cada imagen
sumVerde=sumarPixInt("verdeAndMascara");
sumAzul=sumarPixInt("azulAndMascara");

pr=sumRojo/(w*h);                                    //calculo promedios de intensidad para cada imagen 
pv=sumVerde/(w*h);
pa=sumAzul/(w*h);

   numVA=0;                        //inicializo variables de coeficiente de pearson
   numRA=0; 
   nunRV=0;
   numTriple=0;
   denR=0;
   denV=0;
   denA=0;
  
selectWindow("rojoAndMascara");        //obtengo el valor de cada pixel para cada imagen y los transformo en vectores unidimensionales	
   r = newArray(w*h);    
   i = 0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		r[i++] = getPixel(x,y);
	}

selectWindow("verdeAndMascara");	
  v = newArray(w*h);
  i = 0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		v[i++] = getPixel(x,y);
	}

selectWindow("azulAndMascara");	   
  a = newArray(w*h);
  i = 0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}


for(i=0; i<w*h; i++)                                     //calculo todas la series                
	{
	denR=denR+(r[i]-pr)*(r[i]-pr);                                             
	denV=denV+(v[i]-pv)*(v[i]-pv);
	denA=denA+(a[i]-pa)*(a[i]-pa);
	numVA=numVA+(v[i]-pv)*(a[i]-pa);
	numRA=numRA+(r[i]-pr)*(a[i]-pa);
	numRV=numRV+(r[i]-pr)*(v[i]-pv);
	numTriple=numTriple+(r[i]-pr)*(v[i]-pv)*(a[i]-pa);
	}

denRV=sqrt(denR*denV);                             //calculo coeficientes
denRA=sqrt(denR*denA);
denVA=sqrt(denA*denV);
denTriple=sqrt(denR*denV*denA);

PrRV=numRV/denRV;
PrRA=numRA/denRA;
PrVA=numVA/denVA;
PrTriple=numTriple/denTriple;

print("PrRV: " +PrRV);                           //muestro resultados                                     
print("PrRA: "+PrRA);
print("PrVA: "+PrVA);
print("PrTriple: "+PrTriple);



/*
SETC (Significancia Estadística de la Triple Colocalización)
Julio Buonfigli
*/


// CARGA DE DATOS

id1=getImageID();          //identificación de IDs
tamano=0;
figura=newArray(12);
for(i=id1-1000; i<id1+1000; i++)
	{
	if(isOpen(i))
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}

  Dialog.create("SETC");    //genero ventana de inicio
                                                                    
  Dialog.addChoice("Rojo:", figura);         
  Dialog.addChoice("Verde:", figura);          
  Dialog.addChoice("Azul:", figura);    
  Dialog.addChoice("Máscara:", figura);    
  Dialog.addCheckbox("Calcular significancia estadística", false);
  Dialog.addNumber("Número de imágenes generadas:", 5); 
  Dialog.addCheckbox("Mostrar selección de canales", false);
  Dialog.addCheckbox("Mostrar ejemplo de imagen aleatoria", false);
  Dialog.addCheckbox("Mostrar secuencia de procesamiento de imágenes", false);
  
       Dialog.show();
   	rojo=Dialog.getChoice();
   	verde=Dialog.getChoice();
   	azul=Dialog.getChoice();
   	mascara=Dialog.getChoice();
   	generadas=Dialog.getCheckbox();
	numGeneradas=Dialog.getNumber();
   	mostrarCanales=Dialog.getCheckbox();
	imagenAleatoria=Dialog.getCheckbox();
	proceso=Dialog.getCheckbox();

if(numGeneradas>50)
	exit("El número de imágenes generadas no puede ser mayor a 50");   

if(proceso==true)
	g=false;
	else
	g=true;	

// COLOCALIZACIÓN

setBatchMode(g);                   //por si quiero ver como se procesan las imágenes

imageCalculator("AND create", rojo, mascara);    //opero imagenes con la máscara
rename("rojoAndMascara");
imageCalculator("AND create", verde, mascara);  
rename("verdeAndMascara");
imageCalculator("AND create", azul, mascara);  
rename("azulAndMascara");

imageCalculator("AND create", "rojoAndMascara", "verdeAndMascara");     //opero para obtener doble colocalización
rename("rojoAndVerde");
imageCalculator("AND create", "azulAndMascara", "rojoAndMascara");  
rename("rojoAndAzul");
imageCalculator("AND create", "verdeAndMascara", "azulAndMascara");  
rename("verdeAndAzul");

imageCalculator("AND create", "rojoAndVerde", "azulAndMascara");     //obtengo triple colocalización
rename("TripleColocalizacion");

imageCalculator("OR create", "rojoAndMascara", "verdeAndMascara");    //Calculo la superficie cubierta total dentro de la máscara
rename("rojoOrVerde");
imageCalculator("OR create", "rojoOrVerde", "azulAndMascara");                 
rename("OR");

w = getWidth;
h = getHeight;

function contarUnos(ventana)                     //Declaro una función que cuenta unos
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==255)
		sumador++;
	}
return sumador;
}

function contarCeros(ventana)                     //Declaro una función que cuenta ceros
{
selectWindow(ventana);       
   a = newArray(w*h);
   i = 0;
   sumador=0;
for (y=0; y<h; y++)
	{
	for (x=0; x<w; x++)
		a[i++] = getPixel(x,y);
	}
for(i=0; i<w*h; i++)
	{
	if(a[i]==0)
		sumador++;
	}
return sumador;
}

unosMascara=contarUnos(mascara);                        //cuento unos en la mascara

unosRvam=contarUnos("TripleColocalizacion");             // cuento pixeles de triple colo

unosRojos=contarUnos("rojoAndMascara");                     //cuento unos en cada canal
unosVerdes=contarUnos("verdeAndMascara");
unosAzules=contarUnos("azulAndMascara");

unosRV=contarUnos("rojoAndVerde");                       //cuento unos de doble colo
unosRA=contarUnos("rojoAndAzul");
unosVA=contarUnos("verdeAndAzul");

unosRvamOr=contarUnos("OR");                           //cuento unos en el triple OR

cerosMascara=contarCeros(mascara);                    //cuento ceros en la mascara y en cada canal
cerosRojos=contarCeros("rojoAndMascara");
cerosVerdes=contarCeros("verdeAndMascara");
cerosAzules=contarCeros("azulAndMascara");

rv=(unosRV/unosRojos)*100;                            //calculo coeficientes de colocalización
vr=(unosRV/unosVerdes)*100;
ra=(unosRA/unosRojos)*100;
ar=(unosRA/unosAzules)*100;
va=(unosVA/unosVerdes)*100;
av=(unosVA/unosAzules)*100;
rvasc=(unosRvam/unosRvamOr)*100;
rvaenr=(unosRvam/unosRojos)*100;
rvaenv=(unosRvam/unosVerdes)*100;
rvaena=(unosRvam/unosAzules)*100;

rvvr=rv+vr;                       // variables útiles para hacer cálculo de significancia estadística de triple colocalización
arra=ra+ar;
vaav=va+av;



//  SIGNIFICANCIA ESTADÍSTICA

cerosRandRojos=cerosRojos-cerosMascara;                       // calculo la cantidad de ceros dentro de la máscara para cada color
cerosRandVerdes=cerosVerdes-cerosMascara;
cerosRandAzules=cerosAzules-cerosMascara;

if(generadas==true)
{

rrv=newArray(numGeneradas);                           //Defino arreglos para cada indice de colocalización
rvr=newArray(numGeneradas);
rra=newArray(numGeneradas);
rar=newArray(numGeneradas);
rva=newArray(numGeneradas);
rav=newArray(numGeneradas);
rrvasc=newArray(numGeneradas);
rrvaenr=newArray(numGeneradas);
rrvaenv=newArray(numGeneradas);
rrvaena=newArray(numGeneradas);

pcrrv=0;		                                       //Inicializo contadores positivos
pcrvr=0;	
pcrra=0;
pcrar=0;
pcrva=0;
pcrav=0;
pcrrvasc=0;
pcrrvaenr=0;
pcrrvaenv=0;
pcrrvaena=0;

ncrrv=0;		                                       //Inicializo contadores negativos
ncrvr=0;
ncrra=0;
ncrar=0;
ncrva=0;
ncrav=0;
ncrrvasc=0;
ncrrvaenr=0;
ncrrvaenv=0;
ncrrvaena=0;



for(s=0; s<numGeneradas; s++)                        //rulo para generar tantas imágenes aleatorias para cada fluoróforo como se cargue en el diálogo de entrada
	{
	beep();
	
	selectWindow(mascara);                            //genero una imagen aleatoria para el canal rojo
	run("Duplicate...", "title=RandRojo");
	z=0;
            f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			z = getPixel(x,y);
			if(z==255)
				{
				f=random;
				if(f<=cerosRandRojos/unosMascara)
					setPixel(x, y, 0);
				}
			}
		}
	updateDisplay();


	selectWindow(mascara);                            //genero una imagen aleatoria para el canal verde
	run("Duplicate...", "title=RandVerde");
	z=0;
   	f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			z = getPixel(x,y);
			if(z==255)
				{
				f=random;
				if(f<=cerosRandVerdes/unosMascara)
					setPixel(x, y, 0);
				}
			}
		}
	updateDisplay();


	selectWindow(mascara);                            //genero una imagen aleatoria para el canal azul
	run("Duplicate...", "title=RandAzul");
	z=0;
   	f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			z = getPixel(x,y);
			if(z==255)
				{
				f=random;
				if(f<=cerosRandAzules/unosMascara)
					setPixel(x, y, 0);
				}
			}
		}
	updateDisplay();
	
	imageCalculator("AND create", "RandRojo", "RandVerde");     //opero para obtener doble colocalización
	rename("RandRojoAndRandVerde");
	imageCalculator("AND create", "RandRojo", "RandAzul");  
	rename("RandRojoAndRandAzul");
	imageCalculator("AND create", "RandVerde", "RandAzul");  
	rename("RandVerdeAndRandAzul");
	
	if(rvvr>vaav && rvvr>arra)
		{													
		imageCalculator("AND create", "RandAzul", "rojoAndVerde");     // chequeo cual es color que menos colocaliza con el resto y obtengo triple colocalización
		rename("RandTripleColocalizacion");
		}
	if(vaav>rvvr && vaav>arra)
		{													
		imageCalculator("AND create", "RandRojo", "verdeAndAzul");   
		rename("RandTripleColocalizacion");
		}
	if(arra>vaav &&  arra>rvvr)
		{													
		imageCalculator("AND create", "RandVerde", "rojoAndAzul");  
		rename("RandTripleColocalizacion");
		}
	
	RandunosRvam=contarUnos("RandTripleColocalizacion");         //Cuento la cantidad de pixeles de triple colo
	
	RandunosRV=contarUnos("RandRojoAndRandVerde");    //cueno pixeles de doble colo 
	RandunosRA=contarUnos("RandRojoAndRandAzul"); 
	RandunosVA=contarUnos("RandVerdeAndRandAzul"); 

	
// la superficie cubierta total aleatoria es la misma que la del ensayo
// igual que el total de unos para cada color son los del ensayo


	rrv[s]=(RandunosRV/unosRojos)*100;                            //calculo coeficientes de colocalización
	rvr[s]=(RandunosRV/unosVerdes)*100;
	rra[s]=(RandunosRA/unosRojos)*100;
	rar[s]=(RandunosRA/unosAzules)*100;
	rva[s]=(RandunosVA/unosVerdes)*100;
	rav[s]=(RandunosVA/unosAzules)*100;	
	rrvasc[s]=(RandunosRvam/unosRvamOr)*100;
	rrvaenr[s]=(RandunosRvam/unosRojos)*100;
	rrvaenv[s]=(RandunosRvam/unosVerdes)*100;
	rrvaena[s]=(RandunosRvam/unosAzules)*100;

	if(rrv[s]<rv)                           //Para cada coeficiente de colocalización cuento cuantas veces fue mayor el generado al azar
		pcrrv++;
		else
		ncrrv++;	
	if(rvr[s]<vr)
		pcrvr++;
		else
		ncrvr++;
	if(rra[s]<ra)
		pcrra++;
		else
		ncrra++;
	if(rar[s]<ar)
		pcrar++;
		else
		ncrar++;	
	if(rva[s]<va)
		pcrva++;
		else
		ncrva++;
	if(rav[s]<av)
		pcrav++;
		else
		ncrav++;
	if(rrvasc[s]<rvasc)
		pcrrvasc++;
		else
		ncrrvasc++;	
	if(rrvaenr[s]<rvaenr)
		pcrrvaenr++;
		else
		ncrrvaenr++;	
	if(rrvaenv[s]<rvaenv)
		pcrrvaenv++;
		else
		ncrrvaenv++;
	if(rrvaena[s]<rvaena)
		pcrrvaena++;
		else
		ncrrvaena++;	
	
			
}


sumRrv=0;                          //inicializo variables de suma para promedios
sumRvr=0;
sumRra=0;
sumRvr=0;
sumRar=0;
sumRva=0;
sumRav=0;
sumRrvasc=0;
sumRrvaenr=0;
sumRrvaenv=0;
sumRrvaena=0;


for(i=0; i<numGeneradas; i++)         //sumo
	{	
	sumRrv=sumRrv+rrv[i];
	sumRvr=sumRvr+rvr[i];
	sumRra=sumRra+rra[i];
	sumRar=sumRar+rar[i];
	sumRva=sumRva+rva[i];
	sumRav=sumRav+rav[i];
	sumRrvasc=sumRrvasc+rrvasc[i];
	sumRrvaenr=sumRrvaenr+rrvaenr[i];
	sumRrvaenv=sumRrvaenv+rrvaenv[i];
	sumRrvaena=sumRrvaena+rrvaena[i];
	}
	
promRrv=sumRrv/numGeneradas;                                    //promedio
promRvr=sumRvr/numGeneradas; 
promRra=sumRra/numGeneradas; 
promRar=sumRar/numGeneradas; 
promRva=sumRva/numGeneradas; 
promRav=sumRav/numGeneradas;
promRrvasc=sumRrvasc/numGeneradas; 
promRrvaenr=sumRrvaenr/numGeneradas; 
promRrvaenv=sumRrvaenv/numGeneradas; 
promRrvaena=sumRrvaena/numGeneradas; 
}


//RESULTADOS


print("RESULTADOS:");                               //Muestro resultados
print("");
	print("DOBLE COLOCALIZACIÓN:");
	print("El porcentaje de fluoróforo rojo en el canal verde es de: "+rv+" %.");
	if(generadas==true)
		{
		print("Y el resultado del promedio de aleatorizaciones es de: "+promRrv+" %.");
		print("Los resultados de colocalización por azar fueron en "+pcrrv+" aleatorizaciones menores que el ensayo y en "+ncrrv+" aleatorizaciones mayores"); 
		}
	print("El porcentaje de fluoróforo verde en el canal rojo es de: "+vr+" %.");
	if(generadas==true)
		{
		print("Y el resultado del promedio de aleatorizaciones es de: "+promRvr+" %.");
		print("Los resultados de colocalización por azar fueron en "+pcrvr+" aleatorizaciones menores que el ensayo y en "+ncrvr+" aleatorizaciones mayores");
		}
	print("El porcentaje de fluoróforo rojo en el canal azul es de: "+ra+" %."); 
	if(generadas==true)
		{
		print("Y el resultado del promedio de aleatorizaciones es de: "+promRra+" %");
		print("Los resultados de colocalización por azar fueron en "+pcrra+" aleatorizaciones menores que el ensayo y en "+ncrra+" aleatorizaciones mayores");
		}
	print("El porcentaje de fluoróforo azul en el canal rojo es de: "+ar+" %."); 
	if(generadas==true)
		{	
		print("Y el resultado del promedio de aleatorizaciones es de: "+promRar+" %.");
		print("Los resultados de colocalización por azar fueron en "+pcrar+" aleatorizaciones menores que el ensayo y en "+ncrar+" aleatorizaciones mayores");
		}
	print("El porcentaje de fluoróforo verde en el canal azul es de: "+va+" %."); 
		if(generadas==true)
		{
		print("Y el resultado del promedio de aleatorizaciones es de: "+promRva+" %.");
		print("Los resultados de colocalización por azar fueron en "+pcrva+" aleatorizaciones menores que el ensayo y en "+ncrva+" aleatorizaciones mayores");
		}
	print("El porcentaje de fluoróforo azul en el canal verde es de: "+av+" %."); 
	if(generadas==true)
		{
		print("Y el resultado del promedio de aleatorizaciones es de: "+promRav+" %.");
		print("Los resultados de colocalización por azar fueron en "+pcrav+" aleatorizaciones menores que el ensayo y en "+ncrav+" aleatorizaciones mayores");	
		}	
	print("");
print("TRIPLE COLOCALIZACIÓN:");
print("El porcentaje de triple colocalización sobre la superficie cubierta por los tres fluoróforos es de: "+rvasc+" %.");
if(generadas==true)
	{
	print("Y el resultado del promedio de aleatorizaciones es de: "+promRrvasc+" %.");
	print("Los resultados de colocalización por azar fueron en "+pcrrvasc+" aleatorizaciones menores que el ensayo y en "+ncrrvasc+" aleatorizaciones mayores");
	}
print("El porcentaje de triple colocalización respecto del canal rojo es de: "+rvaenr+" %.");
if(generadas==true)
	{
	print("Y el resultado del promedio de aleatorizaciones es de: "+promRrvaenr+" %.");
	print("Los resultados de colocalización por azar fueron en "+pcrrvaenr+" aleatorizaciones menores que el ensayo y en "+ncrrvaenr+" aleatorizaciones mayores");
	}
print("El porcentaje de triple colocalización respecto del canal verde es de: "+rvaenv+" %.");
if(generadas==true)
	{
	print("Y el resultado del promedio de aleatorizaciones es de: "+promRrvaenv+" %.");
	print("Los resultados de colocalización por azar fueron en "+pcrrvaenv+" aleatorizaciones menores que el ensayo y en "+ncrrvaenv+" aleatorizaciones mayores");
	}
print("El porcentaje de triple colocalización respecto del canal azul es de: "+rvaena+" %.");
if(generadas==true)
	{
	print("Y el resultado del promedio de aleatorizaciones es de: "+promRrvaena+" %.");
	print("Los resultados de colocalización por azar fueron en "+pcrrvaena+" aleatorizaciones menores que el ensayo y en "+ncrrvaena+" aleatorizaciones mayores");
	}
	print("");

setBatchMode(false);

imageCalculator("AND create", rojo, mascara);                       //Genero imagen de colocalizacion
run("Red");
rename("CanalRojo");
imageCalculator("AND create", verde, mascara);  
run("Green");
rename("CanalVerde");
imageCalculator("AND create", azul, mascara);  
run("Blue");
rename("CanalAzul");
if(mostrarCanales==true)
	run("Merge Channels...", "c1=CanalRojo c2=CanalVerde c3=CanalAzul create keep");
	else
	run("Merge Channels...", "c1=CanalRojo c2=CanalVerde c3=CanalAzul create");


if(imagenAleatoria==true)
{
selectWindow(mascara);                            //muestro ejemplo de imagen aleatoria
	run("Duplicate...", "title=RandRojo");
	run("Red");
	z=0;
            f=0;
   	for (y=0; y<h; y++)
		{
      		for (x=0; x<w; x++)
			{
          			z = getPixel(x,y);
			if(z==255)
				{
				f=random;
				if(f<=cerosRandRojos/unosMascara)
					setPixel(x, y, 0);
				}
			}
		}
	updateDisplay();

}
selectWindow("azulAndMascara");
close();












