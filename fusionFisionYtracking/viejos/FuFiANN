
macro "FuFi [f]" {

function poligono(fA, fA2, sepin, sepex, CX, CY, pot) {
xa=pow(fA2, pot)*(ow/2)*cos(t+sepin*dt)+CX[j];
ya=pow(fA2, pot)*(oh/2)*sin(t+sepin*dt)+CY[j];
xb=pow(fA2, pot)*(ow/2)*cos(t+dt)+CX[j];
yb=pow(fA2, pot)*(oh/2)*sin(t+dt)+CY[j];
xc=pow(fA2, pot)*(ow/2)*cos(t+(2-sepin)*dt)+CX[j];
yc=pow(fA2, pot)*(oh/2)*sin(t+(2-sepin)*dt)+CY[j];
XA=pow(fA2, pot)*fA*(ow/2)*cos(t+sepex*dt)+CX[j];
YA=pow(fA2, pot)*fA*(oh/2)*sin(t+sepex*dt)+CY[j];
XB=pow(fA2, pot)*fA*(ow/2)*cos(t+dt)+CX[j];
YB=pow(fA2, pot)*fA*(oh/2)*sin(t+dt)+CY[j];
XC=pow(fA2, pot)*fA*(ow/2)*cos(t+(2-sepex)*dt)+CX[j];
YC=pow(fA2, pot)*fA*(oh/2)*sin(t+(2-sepex)*dt)+CY[j];
makePolygon(xa,ya,xb,yb,xc,yc,XC,YC,XB,YB,XA,YA);
}

function igualar(w, h, frames) {
selectWindow("Final");
size=1/(w*h);
ipp=newArray(frames);
for(i=1; i<frames; i++)
	{
	setSlice(i);
	ipp[i]=0;
	for(y=0; y<h; y++)
		{
		for(x=0; x<w; x++)
			{
			ipp[i]=ipp[i]+getPixel(x,y);
			}
		}
	ipp[i]=ipp[i]*size;
	}

ip=0;
for(i=1; i<frames; i++)
	ip=ip+ipp[i];
ip=ip/frames;

for(i=1; i<frames; i++)
	{
	setSlice(i);
	fac=ip/ipp[i];
	for(y=0; y<h; y++)
		{
		for(x=0; x<w; x++)
			{
			pix=getPixel(x,y);
			setPixel(x, y, pix*fac); 
			}
		}
	updateDisplay();
	}
}

function umbral(w, h, frames, umb) {
selectWindow("Final");
for(i=1; i<frames; i++)
	{
	setSlice(i);
	for(y=0; y<h; y++)
		{
		for(x=0; x<w; x++)
			{
			pix=getPixel(x,y);
			if(pix<umb)
				setPixel(x, y, 0); 
			}
		}
	updateDisplay();
	}
}



id1=getImageID();          
tamano=0;

figura=newArray(nImages);
for(i=id1-1000; i<id1+1000; i++)
	{
	showStatus("Loading images...");
	if(isOpen(i) && tamano<nImages)
		{
		selectImage(i);
		figura[tamano]=getTitle();
		tamano++;
		}		
	}

Dialog.create("Fusion-Fision");                                                          
 Dialog.addChoice("Load stack:", figura); 
  Dialog.addCheckbox("Cell drift", true); 
    //Dialog.addNumber("Origin: ", 0);
  Dialog.addCheckbox("Equalization", true); 
  Dialog.addCheckbox("Thresholding", true); 
  Dialog.addNumber("Threshold: ", 0);  
  Dialog.addCheckbox("Unsharp Mask", true); 
  Dialog.addNumber("radius: ", 4);
  Dialog.addNumber("mask weight (0-1): ", 0.8);
  Dialog.addNumber("Step delay: ", 0);
  Dialog.addCheckbox("More optioons", true);  //fragmentacion y dem치s y opciones de drift
 Dialog.show();

                                               
  img=Dialog.getChoice(); 
  drift=Dialog.getCheckbox(); 
    //Dialog.addNumber("Origin: ", 0);
  eq=Dialog.getCheckbox(); 
  Thresholding=Dialog.getCheckbox(); 
  threshold=Dialog.getNumber();  
  um=Dialog.getCheckbox(); 
  radius=Dialog.getNumber();
  mw=Dialog.addNumber();
  sd=Dialog.addNumber();
  mo=Dialog.addCheckbox();  //fragmentacion y dem치s y opciones de drift

run("ROI Manager...");
selectWindow("ROI Manager");
run("Close");
selectWindow(img);
roiManager("Add");
run("Select None");
run("Duplicate...", "duplicate");
rename("Final");
run("8-bit");
w=getWidth();                    
h=getHeight();
frames=nSlices();
roiManager("Select", 0);
run("Set Measurements...", "centroid bounding redirect=None decimal=0");
run("Measure");
cx=getResult("X", 0);
cy=getResult("Y", 0);
ow=getResult("Width", 0);
oh=getResult("Height", 0);
run("Clear Results"); 
run("Select None");

pi=3.141592653589793; 
frag=12;                      //fragmentaci칩n de anillos. 
dt=pi/frag;                //intervalo
fA=1.115;                     //espesor de anillo
fA2=1.2;                  //separacion entre anillos internos y externo
sepin=0.05;               //separacion entre segmentos de anillo interno
sepex=0.4;               //separaci칩n entre vertices externos del anillo externo
t=0;

if(eq==true) igualar(w, h, frames);
if(Thresholding==true) umbral(w, h, frames, umb);
if(um==true) run("Unsharp Mask...", "radius=radius mask=mw stack");

CX=newArray(frames+1);
CY=newArray(frames+1);
if(drift==true)
{
selectWindow("Final");                 
run("Select None");
run("Duplicate...", "title=Nodo duplicate");
run("Unsharp Mask...", "radius=12 mask=0.99 stack");
setAutoThreshold("Minimum dark");
setOption("BlackBackground", false);
run("Convert to Mask", "method=Minimum background=Dark calculate");
ZZ=1.15;
makeOval(cx-ZZ*ow/2, cy-ZZ*oh/2, ZZ*ow, ZZ*oh);
run("Make Inverse");
setForegroundColor(0, 0, 0);
for(i=1; i<frames; i++)
	{
	setSlice(i);
	run("Fill", "slice");
	}
run("Select None");
run("Median...", "radius=1 stack");
run("Invert", "stack");
//run("Close-", "stack");
run("Fill Holes", "stack");
run("Watershed", "stack");
run("Invert", "stack");
run("Set Measurements...", "centroid redirect=None decimal=2");
for(i=1; i<frames; i++)
	{
	setSlice(i);
	//doWand(CX[i-1], CY[i-1]);
	doWand(cx, cy);
	run("Measure");
	CX[i]=getResult("X", i-1);
	CX[i]=round(CX[i]);
	CY[i]=getResult("Y", i-1);
	CY[i]=round(CY[i]);
	//wait(60);
	}
selectWindow("Nodo");
//close();
run("Clear Results");
}
else
{
for(i=1; i<frames; i++)
	{
	CX[i]=cx;
	CY[i]=cy;
	}
}


selectWindow("Final");
for(i=1; i<frag+1; i++)     // lazo principal
	{
	run("Select None");
	for(j=1; j<frames+1; j++)   //lazo de cuadrante interno
		{
		//selectWindow("Final");
		setSlice(j);
		run("Select None");
		xa=(ow/2)*cos(t+sepin*dt)+CX[j];
		ya=(oh/2)*sin(t+sepin*dt)+CY[j];
		xb=(ow/2)*cos(t+dt)+CX[j];
		yb=(oh/2)*sin(t+dt)+CY[j];
		xc=(ow/2)*cos(t+(2-sepin)*dt)+CX[j];
		yc=(oh/2)*sin(t+(2-sepin)*dt)+CY[j];
		XA=fA*(ow/2)*cos(t+sepin*dt)+CX[j];
		YA=fA*(oh/2)*sin(t+sepin*dt)+CY[j];
		XB=fA*(ow/2)*cos(t+dt)+CX[j];
		YB=fA*(oh/2)*sin(t+dt)+CY[j];
		XC=fA*(ow/2)*cos(t+(2-sepin)*dt)+CX[j];
		YC=fA*(oh/2)*sin(t+(2-sepin)*dt)+CY[j];
		makePolygon(xa,ya,xb,yb,xc,yc,XC,YC,XB,YB,XA,YA);
		if(j==1)
			roiManager("Add");
		run("Measure");   
		v1[cont]=getResult("Mean", 0)/255;
		run("Clear Results");
		if(wai==true)
			wait(30);
		run("Select None");
		//selectWindow("Final");
		xa=fA2*(ow/2)*cos(t+sepin*dt)+CX[j];
		ya=fA2*(oh/2)*sin(t+sepin*dt)+CY[j];
		xb=fA2*(ow/2)*cos(t+dt)+CX[j];
		yb=fA2*(oh/2)*sin(t+dt)+CY[j];
		xc=fA2*(ow/2)*cos(t+(2-sepin)*dt)+CX[j];
		yc=fA2*(oh/2)*sin(t+(2-sepin)*dt)+CY[j];
		XA=fA2*fA*(ow/2)*cos(t+sepex*dt)+CX[j];
		YA=fA2*fA*(oh/2)*sin(t+sepex*dt)+CY[j];
		XB=fA2*fA*(ow/2)*cos(t+dt)+CX[j];
		YB=fA2*fA*(oh/2)*sin(t+dt)+CY[j];
		XC=fA2*fA*(ow/2)*cos(t+(2-sepex)*dt)+CX[j];
		YC=fA2*fA*(oh/2)*sin(t+(2-sepex)*dt)+CY[j];
		makePolygon(xa,ya,xb,yb,xc,yc,XC,YC,XB,YB,XA,YA);
		if(j==1)
			roiManager("Add");
		run("Measure");
		v2[cont]=getResult("Mean", 0)/255;
		run("Clear Results");
		if(wai==true)
			wait(30);
		run("Select None");
		//selectWindow("Final");
		xa=fA2*fA2*(ow/2)*cos(t+sepin*dt)+CX[j];
		ya=fA2*fA2*(oh/2)*sin(t+sepin*dt)+CY[j];
		xb=fA2*fA2*(ow/2)*cos(t+dt)+CX[j];
		yb=fA2*fA2*(oh/2)*sin(t+dt)+CY[j];
		xc=fA2*fA2*(ow/2)*cos(t+(2-sepin)*dt)+CX[j];
		yc=fA2*fA2*(oh/2)*sin(t+(2-sepin)*dt)+CY[j];
		XA=fA2*fA2*fA*(ow/2)*cos(t+sepex*dt)+CX[j];
		YA=fA2*fA2*fA*(oh/2)*sin(t+sepex*dt)+CY[j];
		XB=fA2*fA2*fA*(ow/2)*cos(t+dt)+CX[j];
		YB=fA2*fA2*fA*(oh/2)*sin(t+dt)+CY[j];
		XC=fA2*fA2*fA*(ow/2)*cos(t+(2-sepex)*dt)+CX[j];
		YC=fA2*fA2*fA*(oh/2)*sin(t+(2-sepex)*dt)+CY[j];
		makePolygon(xa,ya,xb,yb,xc,yc,XC,YC,XB,YB,XA,YA);
		if(j==1)
			roiManager("Add");
		run("Measure");
		v3[cont]=getResult("Mean", 0)/255;
		run("Clear Results");
		if(wai==true)
			wait(30);
		//run("Select None");
		run("Select None");
		//selectWindow("Final");
		xa=fA2*fA2*fA2*(ow/2)*cos(t+sepin*dt)+CX[j];
		ya=fA2*fA2*fA2*(oh/2)*sin(t+sepin*dt)+CY[j];
		xb=fA2*fA2*fA2*(ow/2)*cos(t+dt)+CX[j];
		yb=fA2*fA2*fA2*(oh/2)*sin(t+dt)+CY[j];
		xc=fA2*fA2*fA2*(ow/2)*cos(t+(2-sepin)*dt)+CX[j];
		yc=fA2*fA2*fA2*(oh/2)*sin(t+(2-sepin)*dt)+CY[j];
		XA=fA2*fA2*fA2*fA*(ow/2)*cos(t+sepex*dt)+CX[j];
		YA=fA2*fA2*fA2*fA*(oh/2)*sin(t+sepex*dt)+CY[j];
		XB=fA2*fA2*fA2*fA*(ow/2)*cos(t+dt)+CX[j];
		YB=fA2*fA2*fA2*fA*(oh/2)*sin(t+dt)+CY[j];
		XC=fA2*fA2*fA2*fA*(ow/2)*cos(t+(2-sepex)*dt)+CX[j];
		YC=fA2*fA2*fA2*fA*(oh/2)*sin(t+(2-sepex)*dt)+CY[j];
		makePolygon(xa,ya,xb,yb,xc,yc,XC,YC,XB,YB,XA,YA);
		if(j==1)
			roiManager("Add");
		run("Measure");
		v4[cont]=getResult("Mean", 0)/255;
		run("Clear Results");
		if(wai==true)
			wait(30);
		run("Select None");
		//selectWindow("Final");
		xa=fA2*fA2*fA2*fA2*(ow/2)*cos(t+sepin*dt)+CX[j];
		ya=fA2*fA2*fA2*fA2*(oh/2)*sin(t+sepin*dt)+CY[j];
		xb=fA2*fA2*fA2*fA2*(ow/2)*cos(t+dt)+CX[j];
		yb=fA2*fA2*fA2*fA2*(oh/2)*sin(t+dt)+CY[j];
		xc=fA2*fA2*fA2*fA2*(ow/2)*cos(t+(2-sepin)*dt)+CX[j];
		yc=fA2*fA2*fA2*fA2*(oh/2)*sin(t+(2-sepin)*dt)+CY[j];
		XA=fA2*fA2*fA2*fA2*fA*(ow/2)*cos(t+sepex*dt)+CX[j];
		YA=fA2*fA2*fA2*fA2*fA*(oh/2)*sin(t+sepex*dt)+CY[j];
		XB=fA2*fA2*fA2*fA2*fA*(ow/2)*cos(t+dt)+CX[j];
		YB=fA2*fA2*fA2*fA2*fA*(oh/2)*sin(t+dt)+CY[j];
		XC=fA2*fA2*fA2*fA2*fA*(ow/2)*cos(t+(2-sepex)*dt)+CX[j];
		YC=fA2*fA2*fA2*fA2*fA*(oh/2)*sin(t+(2-sepex)*dt)+CY[j];
		makePolygon(xa,ya,xb,yb,xc,yc,XC,YC,XB,YB,XA,YA);
		if(j==1)
			roiManager("Add");
		run("Measure");
		v5[cont]=getResult("Mean", 0)/255;
		run("Clear Results");
		if(wai==true)
			wait(30);
			
		cont++;
	}	
	t=t+2*dt;
}








